
Digital_Clock_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e8  080047e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080047e8  080047e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047e8  080047e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08004860  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004860  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d43d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b1  00000000  00000000  0002d4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00030678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a41  00000000  00000000  00031348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001282c  00000000  00000000  00049d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b204  00000000  00000000  0005c5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e77b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc4  00000000  00000000  000e780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004608 	.word	0x08004608

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004608 	.word	0x08004608

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <BUTTON_Handle>:
#include "BUTTON.h"
void BUTTON_Handle(BUTTON_Typedef *BTN, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, MODE *DISPLAY_MODE, OPTION *OPTION_Choose, OPTION *OPTION_Point)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	603b      	str	r3, [r7, #0]
 8000168:	4613      	mov	r3, r2
 800016a:	80fb      	strh	r3, [r7, #6]
	BUTTON_Detect(BTN, GPIOx, GPIO_Pin);
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	461a      	mov	r2, r3
 8000170:	68b9      	ldr	r1, [r7, #8]
 8000172:	68f8      	ldr	r0, [r7, #12]
 8000174:	f000 f80a 	bl	800018c <BUTTON_Detect>
	PRESSED_SignalHandle(BTN, DISPLAY_MODE, OPTION_Choose, OPTION_Point);
 8000178:	69fb      	ldr	r3, [r7, #28]
 800017a:	69ba      	ldr	r2, [r7, #24]
 800017c:	6839      	ldr	r1, [r7, #0]
 800017e:	68f8      	ldr	r0, [r7, #12]
 8000180:	f000 f865 	bl	800024e <PRESSED_SignalHandle>
}
 8000184:	bf00      	nop
 8000186:	3710      	adds	r7, #16
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <BUTTON_Detect>:

void BUTTON_Detect(BUTTON_Typedef *BTN, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	4613      	mov	r3, r2
 8000198:	80fb      	strh	r3, [r7, #6]
	BTN->Current = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	4619      	mov	r1, r3
 800019e:	68b8      	ldr	r0, [r7, #8]
 80001a0:	f001 fea8 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80001a4:	4603      	mov	r3, r0
 80001a6:	461a      	mov	r2, r3
 80001a8:	68fb      	ldr	r3, [r7, #12]
 80001aa:	701a      	strb	r2, [r3, #0]
	if(BTN->Current != BTN->Last)
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	781a      	ldrb	r2, [r3, #0]
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	785b      	ldrb	r3, [r3, #1]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d02f      	beq.n	8000218 <BUTTON_Detect+0x8c>
	{
		HAL_Delay(10);
 80001b8:	200a      	movs	r0, #10
 80001ba:	f001 fc0f 	bl	80019dc <HAL_Delay>
		if(BTN->Current == 0)
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	781b      	ldrb	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d108      	bne.n	80001d8 <BUTTON_Detect+0x4c>
		{
			BTN->Pressed_Counter = HAL_GetTick();
 80001c6:	f001 fbff 	bl	80019c8 <HAL_GetTick>
 80001ca:	4602      	mov	r2, r0
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	60da      	str	r2, [r3, #12]
			BTN->Pressed = 1;
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	2201      	movs	r2, #1
 80001d4:	709a      	strb	r2, [r3, #2]
 80001d6:	e01b      	b.n	8000210 <BUTTON_Detect+0x84>
		}else if(BTN->Current == 1)
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d117      	bne.n	8000210 <BUTTON_Detect+0x84>
		{
			if(HAL_GetTick() - BTN->Pressed_Counter < 3000)
 80001e0:	f001 fbf2 	bl	80019c8 <HAL_GetTick>
 80001e4:	4602      	mov	r2, r0
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	68db      	ldr	r3, [r3, #12]
 80001ea:	1ad3      	subs	r3, r2, r3
 80001ec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80001f0:	4293      	cmp	r3, r2
 80001f2:	d805      	bhi.n	8000200 <BUTTON_Detect+0x74>
			{
				BTN->Is_Press_Short = 1;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	2201      	movs	r2, #1
 80001f8:	70da      	strb	r2, [r3, #3]
				BTN->Is_Pressed_Long = 0;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	2200      	movs	r2, #0
 80001fe:	711a      	strb	r2, [r3, #4]
			}
			BTN->Pressed= 0;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	2200      	movs	r2, #0
 8000204:	709a      	strb	r2, [r3, #2]
			BTN->Pressed_Counter = HAL_GetTick();
 8000206:	f001 fbdf 	bl	80019c8 <HAL_GetTick>
 800020a:	4602      	mov	r2, r0
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	60da      	str	r2, [r3, #12]
		}
		BTN->Last = BTN->Current;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	781a      	ldrb	r2, [r3, #0]
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	705a      	strb	r2, [r3, #1]
	}
	
	if((HAL_GetTick() - BTN->Pressed_Counter >= 3000) && (BTN->Pressed == 1))
 8000218:	f001 fbd6 	bl	80019c8 <HAL_GetTick>
 800021c:	4602      	mov	r2, r0
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	1ad3      	subs	r3, r2, r3
 8000224:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000228:	4293      	cmp	r3, r2
 800022a:	d90c      	bls.n	8000246 <BUTTON_Detect+0xba>
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	789b      	ldrb	r3, [r3, #2]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d108      	bne.n	8000246 <BUTTON_Detect+0xba>
	{
		BTN->Is_Pressed_Long = 1;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	2201      	movs	r2, #1
 8000238:	711a      	strb	r2, [r3, #4]
		BTN->Is_Press_Short = 0;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	2200      	movs	r2, #0
 800023e:	70da      	strb	r2, [r3, #3]
		BTN->Pressed = 0;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	2200      	movs	r2, #0
 8000244:	709a      	strb	r2, [r3, #2]
	}
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <PRESSED_SignalHandle>:

void PRESSED_SignalHandle(BUTTON_Typedef *BTN, MODE *DISPLAY_MODE, OPTION *OPTION_Choose, OPTION *OPTION_Point)
{
 800024e:	b480      	push	{r7}
 8000250:	b085      	sub	sp, #20
 8000252:	af00      	add	r7, sp, #0
 8000254:	60f8      	str	r0, [r7, #12]
 8000256:	60b9      	str	r1, [r7, #8]
 8000258:	607a      	str	r2, [r7, #4]
 800025a:	603b      	str	r3, [r7, #0]
		if(BTN->Is_Pressed_Long == 1)
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d114      	bne.n	800028e <PRESSED_SignalHandle+0x40>
		{
			if(DISPLAY_MODE->Current == CLOCK_DISPLAY) DISPLAY_MODE->Current = MAIN_MENU;
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d103      	bne.n	8000274 <PRESSED_SignalHandle+0x26>
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
 8000272:	e005      	b.n	8000280 <PRESSED_SignalHandle+0x32>
			else DISPLAY_MODE->Current++;
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	b2da      	uxtb	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	701a      	strb	r2, [r3, #0]
			OPTION_Choose->Current = NO_CHOOSE;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
			BTN->Is_Pressed_Long = 0;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	2200      	movs	r2, #0
 800028a:	711a      	strb	r2, [r3, #4]
		{
			if(OPTION_Choose->Current != NO_CHOOSE) OPTION_Choose->Current = NO_CHOOSE;
			else OPTION_Choose->Current = OPTION_Point->Current;
			BTN->Is_Press_Short = 0;
		}
}
 800028c:	e016      	b.n	80002bc <PRESSED_SignalHandle+0x6e>
		}else if(BTN->Is_Press_Short == 1 && DISPLAY_MODE->Current == MAIN_MENU)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	78db      	ldrb	r3, [r3, #3]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d112      	bne.n	80002bc <PRESSED_SignalHandle+0x6e>
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10e      	bne.n	80002bc <PRESSED_SignalHandle+0x6e>
			if(OPTION_Choose->Current != NO_CHOOSE) OPTION_Choose->Current = NO_CHOOSE;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d003      	beq.n	80002ae <PRESSED_SignalHandle+0x60>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
 80002ac:	e003      	b.n	80002b6 <PRESSED_SignalHandle+0x68>
			else OPTION_Choose->Current = OPTION_Point->Current;
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	701a      	strb	r2, [r3, #0]
			BTN->Is_Press_Short = 0;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2200      	movs	r2, #0
 80002ba:	70da      	strb	r2, [r3, #3]
}
 80002bc:	bf00      	nop
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <DELAY_Init>:
//extern TIM_HandleTypeDef htim1;

TIM_HandleTypeDef *DELAY_TIMER; 

void DELAY_Init(TIM_HandleTypeDef *_DELAY_TIMER)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	DELAY_TIMER = _DELAY_TIMER;
 80002d0:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <DELAY_Init+0x18>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	6013      	str	r3, [r2, #0]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	2000008c 	.word	0x2000008c

080002e4 <DELAY_us>:

void DELAY_us(uint16_t US_Value)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	80fb      	strh	r3, [r7, #6]
	DELAY_TIMER->Instance->CNT = 0;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <DELAY_us+0x40>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2200      	movs	r2, #0
 80002f6:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(DELAY_TIMER);
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <DELAY_us+0x40>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f003 fa4d 	bl	800379c <HAL_TIM_Base_Start>
	while(DELAY_TIMER->Instance->CNT < US_Value);
 8000302:	bf00      	nop
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <DELAY_us+0x40>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	429a      	cmp	r2, r3
 8000310:	d3f8      	bcc.n	8000304 <DELAY_us+0x20>
	HAL_TIM_Base_Stop(DELAY_TIMER);
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <DELAY_us+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fa8a 	bl	8003830 <HAL_TIM_Base_Stop>
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000008c 	.word	0x2000008c

08000328 <DHT11_Init>:
GPIO_TypeDef *GPIOx;
uint16_t GPIO_Pin;


void DHT11_Init(DHT11_Typedef *_DHT11, GPIO_TypeDef *_GPIOx, uint16_t _GPIO_Pin)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	4613      	mov	r3, r2
 8000334:	80fb      	strh	r3, [r7, #6]
	DHT11 = _DHT11;
 8000336:	4a07      	ldr	r2, [pc, #28]	; (8000354 <DHT11_Init+0x2c>)
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	6013      	str	r3, [r2, #0]
	GPIOx = _GPIOx;
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <DHT11_Init+0x30>)
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	6013      	str	r3, [r2, #0]
	GPIO_Pin = _GPIO_Pin;
 8000342:	4a06      	ldr	r2, [pc, #24]	; (800035c <DHT11_Init+0x34>)
 8000344:	88fb      	ldrh	r3, [r7, #6]
 8000346:	8013      	strh	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000090 	.word	0x20000090
 8000358:	20000094 	.word	0x20000094
 800035c:	20000098 	.word	0x20000098

08000360 <PIN_ChangeMode_INPUT>:

void PIN_ChangeMode_INPUT(GPIO_TypeDef *_GPIOx, uint16_t _GPIO_Pin)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	460b      	mov	r3, r1
 800036a:	807b      	strh	r3, [r7, #2]
GPIO_InitTypeDef GPIO_InitStruct_ForIP = {0};
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
GPIO_InitStruct_ForIP.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct_ForIP.Pin = _GPIO_Pin;
 800037e:	887b      	ldrh	r3, [r7, #2]
 8000380:	60bb      	str	r3, [r7, #8]
GPIO_InitStruct_ForIP.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]

HAL_GPIO_Init(_GPIOx, &GPIO_InitStruct_ForIP);
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f001 fc2d 	bl	8001bec <HAL_GPIO_Init>
}
 8000392:	bf00      	nop
 8000394:	3718      	adds	r7, #24
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <PIN_ChangeMode_OUTPUT>:

void PIN_ChangeMode_OUTPUT(GPIO_TypeDef *_GPIOx, uint16_t _GPIO_Pin)
{
 800039a:	b580      	push	{r7, lr}
 800039c:	b086      	sub	sp, #24
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	460b      	mov	r3, r1
 80003a4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct_ForOP = {0};
 80003a6:	f107 0308 	add.w	r3, r7, #8
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct_ForOP.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct_ForOP.Pin = _GPIO_Pin;
 80003b8:	887b      	ldrh	r3, [r7, #2]
 80003ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct_ForOP.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2302      	movs	r3, #2
 80003be:	617b      	str	r3, [r7, #20]
	
	HAL_GPIO_Init(_GPIOx, &GPIO_InitStruct_ForOP);
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f001 fc10 	bl	8001bec <HAL_GPIO_Init>
}
 80003cc:	bf00      	nop
 80003ce:	3718      	adds	r7, #24
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <START_Signal_Transmit>:
1. Set the pin (data) as output
2. Pull the pin low and wait for 18ms
3. Set the pin as input for receiving the data*/

void START_Signal_Transmit()
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	PIN_ChangeMode_OUTPUT(GPIOx, GPIO_Pin);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <START_Signal_Transmit+0x40>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <START_Signal_Transmit+0x44>)
 80003de:	8812      	ldrh	r2, [r2, #0]
 80003e0:	4611      	mov	r1, r2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffd9 	bl	800039a <PIN_ChangeMode_OUTPUT>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <START_Signal_Transmit+0x40>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <START_Signal_Transmit+0x44>)
 80003ee:	8811      	ldrh	r1, [r2, #0]
 80003f0:	2200      	movs	r2, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f001 fd95 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80003f8:	2012      	movs	r0, #18
 80003fa:	f001 faef 	bl	80019dc <HAL_Delay>
	PIN_ChangeMode_INPUT(GPIOx, GPIO_Pin);
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <START_Signal_Transmit+0x40>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a05      	ldr	r2, [pc, #20]	; (8000418 <START_Signal_Transmit+0x44>)
 8000404:	8812      	ldrh	r2, [r2, #0]
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ffa9 	bl	8000360 <PIN_ChangeMode_INPUT>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000094 	.word	0x20000094
 8000418:	20000098 	.word	0x20000098

0800041c <RESPONE_SIGNAL_Check>:
1. Wait for 40 us
2. Check if the pin is low, than wait for 80 us. This will totally be a delay of 120 us and the pin should be high now
2. Check if the pin is high. If it is, than the response is VALID */

void RESPONE_SIGNAL_Check()
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	DHT11->RESPON_Signal = INVALID;
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <RESPONE_SIGNAL_Check+0x6c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	DELAY_us(40);
 8000428:	2028      	movs	r0, #40	; 0x28
 800042a:	f7ff ff5b 	bl	80002e4 <DELAY_us>
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <RESPONE_SIGNAL_Check+0x70>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <RESPONE_SIGNAL_Check+0x74>)
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fd5b 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d111      	bne.n	8000468 <RESPONE_SIGNAL_Check+0x4c>
	{
		DELAY_us(80);
 8000444:	2050      	movs	r0, #80	; 0x50
 8000446:	f7ff ff4d 	bl	80002e4 <DELAY_us>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1)
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <RESPONE_SIGNAL_Check+0x70>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <RESPONE_SIGNAL_Check+0x74>)
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f001 fd4d 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800045a:	4603      	mov	r3, r0
 800045c:	2b01      	cmp	r3, #1
 800045e:	d103      	bne.n	8000468 <RESPONE_SIGNAL_Check+0x4c>
		{
			DHT11->RESPON_Signal = VALID;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <RESPONE_SIGNAL_Check+0x6c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
		}
	}
	while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1);
 8000468:	bf00      	nop
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <RESPONE_SIGNAL_Check+0x70>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a08      	ldr	r2, [pc, #32]	; (8000490 <RESPONE_SIGNAL_Check+0x74>)
 8000470:	8812      	ldrh	r2, [r2, #0]
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f001 fd3d 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	d0f4      	beq.n	800046a <RESPONE_SIGNAL_Check+0x4e>
}
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000090 	.word	0x20000090
 800048c:	20000094 	.word	0x20000094
 8000490:	20000098 	.word	0x20000098

08000494 <BYTE_ReadValueReceive>:

uint8_t BYTE_ReadValueReceive()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	uint8_t BIT_Receive;
	uint8_t BIT_Numbering;
	
	for(BIT_Numbering = 0; BIT_Numbering < 8; BIT_Numbering++)
 800049a:	2300      	movs	r3, #0
 800049c:	71bb      	strb	r3, [r7, #6]
 800049e:	e041      	b.n	8000524 <BYTE_ReadValueReceive+0x90>
	{
		while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0);
 80004a0:	bf00      	nop
 80004a2:	4b24      	ldr	r3, [pc, #144]	; (8000534 <BYTE_ReadValueReceive+0xa0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a24      	ldr	r2, [pc, #144]	; (8000538 <BYTE_ReadValueReceive+0xa4>)
 80004a8:	8812      	ldrh	r2, [r2, #0]
 80004aa:	4611      	mov	r1, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 fd21 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f4      	beq.n	80004a2 <BYTE_ReadValueReceive+0xe>
		DELAY_us(40);
 80004b8:	2028      	movs	r0, #40	; 0x28
 80004ba:	f7ff ff13 	bl	80002e4 <DELAY_us>
		if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 80004be:	4b1d      	ldr	r3, [pc, #116]	; (8000534 <BYTE_ReadValueReceive+0xa0>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <BYTE_ReadValueReceive+0xa4>)
 80004c4:	8812      	ldrh	r2, [r2, #0]
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fd13 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10c      	bne.n	80004ee <BYTE_ReadValueReceive+0x5a>
		{
			BIT_Receive = BIT_Receive & (1<<(7-BIT_Numbering));
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	f1c3 0307 	rsb	r3, r3, #7
 80004da:	2201      	movs	r2, #1
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	b25a      	sxtb	r2, r3
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	4013      	ands	r3, r2
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	e00b      	b.n	8000506 <BYTE_ReadValueReceive+0x72>
		}else
		{
			BIT_Receive = BIT_Receive | (1<<(7-BIT_Numbering));
 80004ee:	79bb      	ldrb	r3, [r7, #6]
 80004f0:	f1c3 0307 	rsb	r3, r3, #7
 80004f4:	2201      	movs	r2, #1
 80004f6:	fa02 f303 	lsl.w	r3, r2, r3
 80004fa:	b25a      	sxtb	r2, r3
 80004fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000500:	4313      	orrs	r3, r2
 8000502:	b25b      	sxtb	r3, r3
 8000504:	71fb      	strb	r3, [r7, #7]
		}
		while(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 1);
 8000506:	bf00      	nop
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <BYTE_ReadValueReceive+0xa0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <BYTE_ReadValueReceive+0xa4>)
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f001 fcee 	bl	8001ef4 <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	2b01      	cmp	r3, #1
 800051c:	d0f4      	beq.n	8000508 <BYTE_ReadValueReceive+0x74>
	for(BIT_Numbering = 0; BIT_Numbering < 8; BIT_Numbering++)
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	3301      	adds	r3, #1
 8000522:	71bb      	strb	r3, [r7, #6]
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	2b07      	cmp	r3, #7
 8000528:	d9ba      	bls.n	80004a0 <BYTE_ReadValueReceive+0xc>
	}
	return BIT_Receive;
 800052a:	79fb      	ldrb	r3, [r7, #7]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000094 	.word	0x20000094
 8000538:	20000098 	.word	0x20000098

0800053c <DHT11_Handle>:

void DHT11_Handle()
{
 800053c:	b598      	push	{r3, r4, r7, lr}
 800053e:	af00      	add	r7, sp, #0
	START_Signal_Transmit();
 8000540:	f7ff ff48 	bl	80003d4 <START_Signal_Transmit>
	RESPONE_SIGNAL_Check();
 8000544:	f7ff ff6a 	bl	800041c <RESPONE_SIGNAL_Check>
	DHT11->RH_IntegralByte = BYTE_ReadValueReceive();
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <DHT11_Handle+0x68>)
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	f7ff ffa2 	bl	8000494 <BYTE_ReadValueReceive>
 8000550:	4603      	mov	r3, r0
 8000552:	7063      	strb	r3, [r4, #1]
	DHT11->RH_DecimalByte = BYTE_ReadValueReceive();
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <DHT11_Handle+0x68>)
 8000556:	681c      	ldr	r4, [r3, #0]
 8000558:	f7ff ff9c 	bl	8000494 <BYTE_ReadValueReceive>
 800055c:	4603      	mov	r3, r0
 800055e:	70a3      	strb	r3, [r4, #2]
	DHT11->T_IntegralByte = BYTE_ReadValueReceive();
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <DHT11_Handle+0x68>)
 8000562:	681c      	ldr	r4, [r3, #0]
 8000564:	f7ff ff96 	bl	8000494 <BYTE_ReadValueReceive>
 8000568:	4603      	mov	r3, r0
 800056a:	70e3      	strb	r3, [r4, #3]
	DHT11->T_DecimalByte = BYTE_ReadValueReceive();
 800056c:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <DHT11_Handle+0x68>)
 800056e:	681c      	ldr	r4, [r3, #0]
 8000570:	f7ff ff90 	bl	8000494 <BYTE_ReadValueReceive>
 8000574:	4603      	mov	r3, r0
 8000576:	7123      	strb	r3, [r4, #4]
	DHT11->CHECKSUM_Byte = BYTE_ReadValueReceive();
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <DHT11_Handle+0x68>)
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	f7ff ff8a 	bl	8000494 <BYTE_ReadValueReceive>
 8000580:	4603      	mov	r3, r0
 8000582:	7163      	strb	r3, [r4, #5]
	
	DHT11->TEMP_Data.Current = DHT11->T_IntegralByte;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <DHT11_Handle+0x68>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	78da      	ldrb	r2, [r3, #3]
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <DHT11_Handle+0x68>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	b292      	uxth	r2, r2
 8000590:	80da      	strh	r2, [r3, #6]
	DHT11->HUMI_Data.Current = DHT11->RH_IntegralByte;
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <DHT11_Handle+0x68>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	785a      	ldrb	r2, [r3, #1]
 8000598:	4b02      	ldr	r3, [pc, #8]	; (80005a4 <DHT11_Handle+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	b292      	uxth	r2, r2
 800059e:	815a      	strh	r2, [r3, #10]
}
 80005a0:	bf00      	nop
 80005a2:	bd98      	pop	{r3, r4, r7, pc}
 80005a4:	20000090 	.word	0x20000090

080005a8 <DISPLAY_Handle>:
#include "DISPLAY.h"

DHT11_Typedef *DHT11_Display;

void DISPLAY_Handle(TIME *TIME_DS1307, TIME *TIME_Display, MODE *DISPLAY, OPTION *OPTION_Choose, OPTION *OPTION_Point)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
	switch(DISPLAY->Current)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d02d      	beq.n	800061a <DISPLAY_Handle+0x72>
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f040 80c2 	bne.w	8000748 <DISPLAY_Handle+0x1a0>
	{
		case CLOCK_DISPLAY:
			DS1307_ReadTime(TIME_DS1307);
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f000 fae7 	bl	8000b98 <DS1307_ReadTime>
			if(DISPLAY->Current != DISPLAY->Last)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d01c      	beq.n	8000610 <DISPLAY_Handle+0x68>
			{
				LCD_Clear();
 80005d6:	f000 fcb1 	bl	8000f3c <LCD_Clear>
				LCD_Set_Cursor(0,4);
 80005da:	2104      	movs	r1, #4
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fc87 	bl	8000ef0 <LCD_Set_Cursor>
				LCD_Printf("%02d:%02d:%02d", TIME_DS1307->Hour, TIME_DS1307->Minute, TIME_DS1307->Second);
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	461a      	mov	r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4857      	ldr	r0, [pc, #348]	; (8000750 <DISPLAY_Handle+0x1a8>)
 80005f4:	f000 fcc6 	bl	8000f84 <LCD_Printf>
				LCD_Set_Cursor(1,1);
 80005f8:	2101      	movs	r1, #1
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 fc78 	bl	8000ef0 <LCD_Set_Cursor>
				Date_DisplayToLCD(TIME_DS1307);
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f000 f919 	bl	8000838 <Date_DisplayToLCD>
				DISPLAY->Last = DISPLAY->Current;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	705a      	strb	r2, [r3, #1]
			}else TIME_DisplayToLCD(TIME_DS1307, TIME_Display);
			break;
 800060e:	e09b      	b.n	8000748 <DISPLAY_Handle+0x1a0>
			}else TIME_DisplayToLCD(TIME_DS1307, TIME_Display);
 8000610:	68b9      	ldr	r1, [r7, #8]
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	f000 f8a8 	bl	8000768 <TIME_DisplayToLCD>
			break;
 8000618:	e096      	b.n	8000748 <DISPLAY_Handle+0x1a0>
		
		case MAIN_MENU:
			if(OPTION_Choose->Current == NO_CHOOSE)
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d130      	bne.n	8000684 <DISPLAY_Handle+0xdc>
			{
				if((DISPLAY->Current != DISPLAY->Last) || (OPTION_Choose->Current != OPTION_Choose->Last))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	785b      	ldrb	r3, [r3, #1]
 800062a:	429a      	cmp	r2, r3
 800062c:	d105      	bne.n	800063a <DISPLAY_Handle+0x92>
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	785b      	ldrb	r3, [r3, #1]
 8000636:	429a      	cmp	r2, r3
 8000638:	d016      	beq.n	8000668 <DISPLAY_Handle+0xc0>
				{
					LCD_Clear();
 800063a:	f000 fc7f 	bl	8000f3c <LCD_Clear>
					LCD_Set_Cursor(0,1);
 800063e:	2101      	movs	r1, #1
 8000640:	2000      	movs	r0, #0
 8000642:	f000 fc55 	bl	8000ef0 <LCD_Set_Cursor>
					LCD_Printf("OPTION %02d:", OPTION_Point->Current);
 8000646:	69bb      	ldr	r3, [r7, #24]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4619      	mov	r1, r3
 800064c:	4841      	ldr	r0, [pc, #260]	; (8000754 <DISPLAY_Handle+0x1ac>)
 800064e:	f000 fc99 	bl	8000f84 <LCD_Printf>
					OPTION_DisplayToLCD(OPTION_Point);
 8000652:	69b8      	ldr	r0, [r7, #24]
 8000654:	f000 f972 	bl	800093c <OPTION_DisplayToLCD>
					DISPLAY->Last = DISPLAY->Current;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	705a      	strb	r2, [r3, #1]
					OPTION_Choose->Last = OPTION_Choose->Current;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	781a      	ldrb	r2, [r3, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	705a      	strb	r2, [r3, #1]
				}
				
				if(OPTION_Point->Current != OPTION_Point->Last)
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	785b      	ldrb	r3, [r3, #1]
 8000670:	429a      	cmp	r2, r3
 8000672:	d068      	beq.n	8000746 <DISPLAY_Handle+0x19e>
				{
					OPTION_DisplayToLCD(OPTION_Point);
 8000674:	69b8      	ldr	r0, [r7, #24]
 8000676:	f000 f961 	bl	800093c <OPTION_DisplayToLCD>
					OPTION_Point->Last = OPTION_Point->Current;
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	781a      	ldrb	r2, [r3, #0]
 800067e:	69bb      	ldr	r3, [r7, #24]
 8000680:	705a      	strb	r2, [r3, #1]
						
						default:
							break;
				}
			}
			break;
 8000682:	e060      	b.n	8000746 <DISPLAY_Handle+0x19e>
			}else if(OPTION_Choose->Current != NO_CHOOSE)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d055      	beq.n	8000738 <DISPLAY_Handle+0x190>
					switch(OPTION_Choose->Current)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b03      	cmp	r3, #3
 8000692:	d053      	beq.n	800073c <DISPLAY_Handle+0x194>
 8000694:	2b03      	cmp	r3, #3
 8000696:	dc53      	bgt.n	8000740 <DISPLAY_Handle+0x198>
 8000698:	2b01      	cmp	r3, #1
 800069a:	d002      	beq.n	80006a2 <DISPLAY_Handle+0xfa>
 800069c:	2b02      	cmp	r3, #2
 800069e:	d028      	beq.n	80006f2 <DISPLAY_Handle+0x14a>
							break;
 80006a0:	e04e      	b.n	8000740 <DISPLAY_Handle+0x198>
							if(OPTION_Choose->Current != OPTION_Choose->Last)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d01c      	beq.n	80006e8 <DISPLAY_Handle+0x140>
								LCD_Clear();
 80006ae:	f000 fc45 	bl	8000f3c <LCD_Clear>
								LCD_Set_Cursor(0,1);
 80006b2:	2101      	movs	r1, #1
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 fc1b 	bl	8000ef0 <LCD_Set_Cursor>
								LCD_Write_String("CHANGING TIME:");
 80006ba:	4827      	ldr	r0, [pc, #156]	; (8000758 <DISPLAY_Handle+0x1b0>)
 80006bc:	f000 fc45 	bl	8000f4a <LCD_Write_String>
								LCD_Set_Cursor(1,4);
 80006c0:	2104      	movs	r1, #4
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fc14 	bl	8000ef0 <LCD_Set_Cursor>
								LCD_Printf("%02d:%02d:%02d", TIME_DS1307->Hour, TIME_DS1307->Minute, TIME_DS1307->Second);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	4619      	mov	r1, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	785b      	ldrb	r3, [r3, #1]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	481d      	ldr	r0, [pc, #116]	; (8000750 <DISPLAY_Handle+0x1a8>)
 80006da:	f000 fc53 	bl	8000f84 <LCD_Printf>
								OPTION_Choose->Last = OPTION_Choose->Current;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	781a      	ldrb	r2, [r3, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	705a      	strb	r2, [r3, #1]
							break;
 80006e6:	e02e      	b.n	8000746 <DISPLAY_Handle+0x19e>
								SET_TIME_OptionDisplayToLCD(TIME_DS1307, TIME_Display);
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f000 f990 	bl	8000a10 <SET_TIME_OptionDisplayToLCD>
							break;
 80006f0:	e029      	b.n	8000746 <DISPLAY_Handle+0x19e>
							if(OPTION_Choose->Current != OPTION_Choose->Last)
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d022      	beq.n	8000744 <DISPLAY_Handle+0x19c>
								LCD_Clear();
 80006fe:	f000 fc1d 	bl	8000f3c <LCD_Clear>
								LCD_Set_Cursor(0,0);
 8000702:	2100      	movs	r1, #0
 8000704:	2000      	movs	r0, #0
 8000706:	f000 fbf3 	bl	8000ef0 <LCD_Set_Cursor>
								LCD_Printf("Temperature: %02d", DHT11_Display->TEMP_Data.Current);
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <DISPLAY_Handle+0x1b4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	88db      	ldrh	r3, [r3, #6]
 8000710:	4619      	mov	r1, r3
 8000712:	4813      	ldr	r0, [pc, #76]	; (8000760 <DISPLAY_Handle+0x1b8>)
 8000714:	f000 fc36 	bl	8000f84 <LCD_Printf>
								LCD_Set_Cursor(1,0);
 8000718:	2100      	movs	r1, #0
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fbe8 	bl	8000ef0 <LCD_Set_Cursor>
								LCD_Printf("Humidity: %02d", DHT11_Display->HUMI_Data.Current);
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <DISPLAY_Handle+0x1b4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	895b      	ldrh	r3, [r3, #10]
 8000726:	4619      	mov	r1, r3
 8000728:	480e      	ldr	r0, [pc, #56]	; (8000764 <DISPLAY_Handle+0x1bc>)
 800072a:	f000 fc2b 	bl	8000f84 <LCD_Printf>
								OPTION_Choose->Last = OPTION_Choose->Current;
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	705a      	strb	r2, [r3, #1]
							break;
 8000736:	e001      	b.n	800073c <DISPLAY_Handle+0x194>
			}
 8000738:	bf00      	nop
 800073a:	e004      	b.n	8000746 <DISPLAY_Handle+0x19e>
							break;
 800073c:	bf00      	nop
 800073e:	e002      	b.n	8000746 <DISPLAY_Handle+0x19e>
							break;
 8000740:	bf00      	nop
 8000742:	e000      	b.n	8000746 <DISPLAY_Handle+0x19e>
							break;
 8000744:	bf00      	nop
			break;
 8000746:	bf00      	nop
	}
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08004620 	.word	0x08004620
 8000754:	08004630 	.word	0x08004630
 8000758:	08004640 	.word	0x08004640
 800075c:	2000009c 	.word	0x2000009c
 8000760:	08004650 	.word	0x08004650
 8000764:	08004664 	.word	0x08004664

08000768 <TIME_DisplayToLCD>:

void TIME_DisplayToLCD(TIME *TIME_DS1307, TIME *TIME_Display)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	if(TIME_DS1307->Second != TIME_Display->Second)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d055      	beq.n	800082a <TIME_DisplayToLCD+0xc2>
	{
		LCD_Set_Cursor(0,10);
 800077e:	210a      	movs	r1, #10
 8000780:	2000      	movs	r0, #0
 8000782:	f000 fbb5 	bl	8000ef0 <LCD_Set_Cursor>
		LCD_Printf("%02d", TIME_DS1307->Second);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4829      	ldr	r0, [pc, #164]	; (8000834 <TIME_DisplayToLCD+0xcc>)
 800078e:	f000 fbf9 	bl	8000f84 <LCD_Printf>
		TIME_Display->Second = TIME_DS1307->Second;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	701a      	strb	r2, [r3, #0]
		
		if(TIME_DS1307->Minute != TIME_Display->Minute)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	785a      	ldrb	r2, [r3, #1]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d03e      	beq.n	8000824 <TIME_DisplayToLCD+0xbc>
		{
			LCD_Set_Cursor(0,7);
 80007a6:	2107      	movs	r1, #7
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fba1 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Printf("%02d", TIME_DS1307->Minute);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	4619      	mov	r1, r3
 80007b4:	481f      	ldr	r0, [pc, #124]	; (8000834 <TIME_DisplayToLCD+0xcc>)
 80007b6:	f000 fbe5 	bl	8000f84 <LCD_Printf>
			TIME_Display->Minute = TIME_DS1307->Minute;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	785a      	ldrb	r2, [r3, #1]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	705a      	strb	r2, [r3, #1]
		
			if(TIME_DS1307->Hour != TIME_Display->Hour)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	789a      	ldrb	r2, [r3, #2]
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	789b      	ldrb	r3, [r3, #2]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d02a      	beq.n	8000824 <TIME_DisplayToLCD+0xbc>
			{
				LCD_Set_Cursor(0,4);
 80007ce:	2104      	movs	r1, #4
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 fb8d 	bl	8000ef0 <LCD_Set_Cursor>
				LCD_Printf("%02d", TIME_DS1307->Hour);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	4619      	mov	r1, r3
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <TIME_DisplayToLCD+0xcc>)
 80007de:	f000 fbd1 	bl	8000f84 <LCD_Printf>
				TIME_Display->Hour = TIME_DS1307->Hour;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	789a      	ldrb	r2, [r3, #2]
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	709a      	strb	r2, [r3, #2]
			
				if(TIME_DS1307->Date != TIME_Display->Date)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	791a      	ldrb	r2, [r3, #4]
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d016      	beq.n	8000824 <TIME_DisplayToLCD+0xbc>
				{
					LCD_Set_Cursor(1,1);
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 fb79 	bl	8000ef0 <LCD_Set_Cursor>
					Date_DisplayToLCD(TIME_DS1307);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f81a 	bl	8000838 <Date_DisplayToLCD>
					TIME_Display->Date = TIME_DS1307->Date;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791a      	ldrb	r2, [r3, #4]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	711a      	strb	r2, [r3, #4]
					TIME_Display->Day = TIME_DS1307->Day;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	78da      	ldrb	r2, [r3, #3]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	70da      	strb	r2, [r3, #3]
					TIME_Display->Month = TIME_DS1307->Month;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	795a      	ldrb	r2, [r3, #5]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	715a      	strb	r2, [r3, #5]
					TIME_Display->Year = TIME_DS1307->Year;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	799a      	ldrb	r2, [r3, #6]
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	719a      	strb	r2, [r3, #6]
				}
			}
		}
		DS1307_WriteTime(TIME_DS1307);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f000 f96f 	bl	8000b08 <DS1307_WriteTime>
	}
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	08004674 	.word	0x08004674

08000838 <Date_DisplayToLCD>:

void Date_DisplayToLCD(TIME *TIME_DS1307)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	switch(TIME_DS1307->Date)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	791b      	ldrb	r3, [r3, #4]
 8000844:	3b01      	subs	r3, #1
 8000846:	2b06      	cmp	r3, #6
 8000848:	d864      	bhi.n	8000914 <Date_DisplayToLCD+0xdc>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <Date_DisplayToLCD+0x18>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800086d 	.word	0x0800086d
 8000854:	08000885 	.word	0x08000885
 8000858:	0800089d 	.word	0x0800089d
 800085c:	080008b5 	.word	0x080008b5
 8000860:	080008cd 	.word	0x080008cd
 8000864:	080008e5 	.word	0x080008e5
 8000868:	080008fd 	.word	0x080008fd
	{
		case 1:
			LCD_Printf("Mon-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	78db      	ldrb	r3, [r3, #3]
 8000870:	4619      	mov	r1, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795b      	ldrb	r3, [r3, #5]
 8000876:	461a      	mov	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	799b      	ldrb	r3, [r3, #6]
 800087c:	4828      	ldr	r0, [pc, #160]	; (8000920 <Date_DisplayToLCD+0xe8>)
 800087e:	f000 fb81 	bl	8000f84 <LCD_Printf>
			break;
 8000882:	e048      	b.n	8000916 <Date_DisplayToLCD+0xde>

		case 2:
			LCD_Printf("Tue-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	78db      	ldrb	r3, [r3, #3]
 8000888:	4619      	mov	r1, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	795b      	ldrb	r3, [r3, #5]
 800088e:	461a      	mov	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	799b      	ldrb	r3, [r3, #6]
 8000894:	4823      	ldr	r0, [pc, #140]	; (8000924 <Date_DisplayToLCD+0xec>)
 8000896:	f000 fb75 	bl	8000f84 <LCD_Printf>
			break;
 800089a:	e03c      	b.n	8000916 <Date_DisplayToLCD+0xde>

		case 3:
			LCD_Printf("Wed-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	78db      	ldrb	r3, [r3, #3]
 80008a0:	4619      	mov	r1, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	795b      	ldrb	r3, [r3, #5]
 80008a6:	461a      	mov	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	799b      	ldrb	r3, [r3, #6]
 80008ac:	481e      	ldr	r0, [pc, #120]	; (8000928 <Date_DisplayToLCD+0xf0>)
 80008ae:	f000 fb69 	bl	8000f84 <LCD_Printf>
			break;
 80008b2:	e030      	b.n	8000916 <Date_DisplayToLCD+0xde>
		
		case 4:
			LCD_Printf("Thu-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	4619      	mov	r1, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	795b      	ldrb	r3, [r3, #5]
 80008be:	461a      	mov	r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	799b      	ldrb	r3, [r3, #6]
 80008c4:	4819      	ldr	r0, [pc, #100]	; (800092c <Date_DisplayToLCD+0xf4>)
 80008c6:	f000 fb5d 	bl	8000f84 <LCD_Printf>
			break;
 80008ca:	e024      	b.n	8000916 <Date_DisplayToLCD+0xde>

		case 5:
			LCD_Printf("Fri-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	78db      	ldrb	r3, [r3, #3]
 80008d0:	4619      	mov	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	795b      	ldrb	r3, [r3, #5]
 80008d6:	461a      	mov	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	799b      	ldrb	r3, [r3, #6]
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <Date_DisplayToLCD+0xf8>)
 80008de:	f000 fb51 	bl	8000f84 <LCD_Printf>
			break;
 80008e2:	e018      	b.n	8000916 <Date_DisplayToLCD+0xde>

		case 6:
			LCD_Printf("Sat-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	78db      	ldrb	r3, [r3, #3]
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	795b      	ldrb	r3, [r3, #5]
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	799b      	ldrb	r3, [r3, #6]
 80008f4:	480f      	ldr	r0, [pc, #60]	; (8000934 <Date_DisplayToLCD+0xfc>)
 80008f6:	f000 fb45 	bl	8000f84 <LCD_Printf>
			break;
 80008fa:	e00c      	b.n	8000916 <Date_DisplayToLCD+0xde>

	case 7:
			LCD_Printf("Sun-%02d/%02d/20%02d", TIME_DS1307->Day, TIME_DS1307->Month, TIME_DS1307->Year);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	78db      	ldrb	r3, [r3, #3]
 8000900:	4619      	mov	r1, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	795b      	ldrb	r3, [r3, #5]
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	799b      	ldrb	r3, [r3, #6]
 800090c:	480a      	ldr	r0, [pc, #40]	; (8000938 <Date_DisplayToLCD+0x100>)
 800090e:	f000 fb39 	bl	8000f84 <LCD_Printf>
			break;
 8000912:	e000      	b.n	8000916 <Date_DisplayToLCD+0xde>

	default:
		break;
 8000914:	bf00      	nop
	}
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	0800467c 	.word	0x0800467c
 8000924:	08004694 	.word	0x08004694
 8000928:	080046ac 	.word	0x080046ac
 800092c:	080046c4 	.word	0x080046c4
 8000930:	080046dc 	.word	0x080046dc
 8000934:	080046f4 	.word	0x080046f4
 8000938:	0800470c 	.word	0x0800470c

0800093c <OPTION_DisplayToLCD>:

void OPTION_DisplayToLCD(OPTION *OPTION_Point)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	switch(OPTION_Point->Current)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d038      	beq.n	80009be <OPTION_DisplayToLCD+0x82>
 800094c:	2b03      	cmp	r3, #3
 800094e:	dc4f      	bgt.n	80009f0 <OPTION_DisplayToLCD+0xb4>
 8000950:	2b01      	cmp	r3, #1
 8000952:	d002      	beq.n	800095a <OPTION_DisplayToLCD+0x1e>
 8000954:	2b02      	cmp	r3, #2
 8000956:	d019      	beq.n	800098c <OPTION_DisplayToLCD+0x50>
			LCD_Set_Cursor(0,8);
			LCD_Printf("%02d", OPTION_Point->Current);
			break;
		
		default:
			break;
 8000958:	e04a      	b.n	80009f0 <OPTION_DisplayToLCD+0xb4>
			LCD_Set_Cursor(1, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fac7 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Write_String("                ");
 8000962:	4826      	ldr	r0, [pc, #152]	; (80009fc <OPTION_DisplayToLCD+0xc0>)
 8000964:	f000 faf1 	bl	8000f4a <LCD_Write_String>
			LCD_Set_Cursor(1, 0);
 8000968:	2100      	movs	r1, #0
 800096a:	2001      	movs	r0, #1
 800096c:	f000 fac0 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Write_String(">Set time");
 8000970:	4823      	ldr	r0, [pc, #140]	; (8000a00 <OPTION_DisplayToLCD+0xc4>)
 8000972:	f000 faea 	bl	8000f4a <LCD_Write_String>
			LCD_Set_Cursor(0,8);
 8000976:	2108      	movs	r1, #8
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fab9 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Printf("%02d", OPTION_Point->Current);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	481f      	ldr	r0, [pc, #124]	; (8000a04 <OPTION_DisplayToLCD+0xc8>)
 8000986:	f000 fafd 	bl	8000f84 <LCD_Printf>
			break;
 800098a:	e032      	b.n	80009f2 <OPTION_DisplayToLCD+0xb6>
			LCD_Set_Cursor(1, 0);
 800098c:	2100      	movs	r1, #0
 800098e:	2001      	movs	r0, #1
 8000990:	f000 faae 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Write_String("                ");
 8000994:	4819      	ldr	r0, [pc, #100]	; (80009fc <OPTION_DisplayToLCD+0xc0>)
 8000996:	f000 fad8 	bl	8000f4a <LCD_Write_String>
			LCD_Set_Cursor(1, 0);
 800099a:	2100      	movs	r1, #0
 800099c:	2001      	movs	r0, #1
 800099e:	f000 faa7 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Write_String(">Temperature");
 80009a2:	4819      	ldr	r0, [pc, #100]	; (8000a08 <OPTION_DisplayToLCD+0xcc>)
 80009a4:	f000 fad1 	bl	8000f4a <LCD_Write_String>
			LCD_Set_Cursor(0,8);
 80009a8:	2108      	movs	r1, #8
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 faa0 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Printf("%02d", OPTION_Point->Current);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4813      	ldr	r0, [pc, #76]	; (8000a04 <OPTION_DisplayToLCD+0xc8>)
 80009b8:	f000 fae4 	bl	8000f84 <LCD_Printf>
			break;
 80009bc:	e019      	b.n	80009f2 <OPTION_DisplayToLCD+0xb6>
			LCD_Set_Cursor(1, 0);
 80009be:	2100      	movs	r1, #0
 80009c0:	2001      	movs	r0, #1
 80009c2:	f000 fa95 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Write_String("                ");
 80009c6:	480d      	ldr	r0, [pc, #52]	; (80009fc <OPTION_DisplayToLCD+0xc0>)
 80009c8:	f000 fabf 	bl	8000f4a <LCD_Write_String>
			LCD_Set_Cursor(1, 0);
 80009cc:	2100      	movs	r1, #0
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fa8e 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Write_String(">Exit menu");
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <OPTION_DisplayToLCD+0xd0>)
 80009d6:	f000 fab8 	bl	8000f4a <LCD_Write_String>
			LCD_Set_Cursor(0,8);
 80009da:	2108      	movs	r1, #8
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fa87 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Printf("%02d", OPTION_Point->Current);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <OPTION_DisplayToLCD+0xc8>)
 80009ea:	f000 facb 	bl	8000f84 <LCD_Printf>
			break;
 80009ee:	e000      	b.n	80009f2 <OPTION_DisplayToLCD+0xb6>
			break;
 80009f0:	bf00      	nop
	}
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004724 	.word	0x08004724
 8000a00:	08004738 	.word	0x08004738
 8000a04:	08004674 	.word	0x08004674
 8000a08:	08004744 	.word	0x08004744
 8000a0c:	08004754 	.word	0x08004754

08000a10 <SET_TIME_OptionDisplayToLCD>:

void SET_TIME_OptionDisplayToLCD(TIME *TIME_DS1307, TIME *TIME_Display)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]

 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <DS1307_Init>:
//extern I2C_HandleTypeDef hi2c2;

I2C_HandleTypeDef *DS1307_I2C;

void DS1307_Init(I2C_HandleTypeDef *_DS1307_I2C)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	DS1307_I2C = _DS1307_I2C;
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <DS1307_Init+0x18>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200000a0 	.word	0x200000a0

08000a40 <TIME_Init>:

void TIME_Init(TIME *TimeInit, uint8_t SECOND, uint8_t MINUTE, uint8_t HOUR, uint8_t DAY, uint8_t DATE, uint8_t MONTH, uint8_t YEAR)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	4608      	mov	r0, r1
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4603      	mov	r3, r0
 8000a50:	70fb      	strb	r3, [r7, #3]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70bb      	strb	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	707b      	strb	r3, [r7, #1]
	TimeInit->Second = SECOND;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78fa      	ldrb	r2, [r7, #3]
 8000a5e:	701a      	strb	r2, [r3, #0]
	TimeInit->Minute = MINUTE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	78ba      	ldrb	r2, [r7, #2]
 8000a64:	705a      	strb	r2, [r3, #1]
	TimeInit->Hour = HOUR;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	787a      	ldrb	r2, [r7, #1]
 8000a6a:	709a      	strb	r2, [r3, #2]
	TimeInit->Day = DAY;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7c3a      	ldrb	r2, [r7, #16]
 8000a70:	70da      	strb	r2, [r3, #3]
	TimeInit->Date = DATE;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7d3a      	ldrb	r2, [r7, #20]
 8000a76:	711a      	strb	r2, [r3, #4]
	TimeInit->Month = MONTH;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	7e3a      	ldrb	r2, [r7, #24]
 8000a7c:	715a      	strb	r2, [r3, #5]
	TimeInit->Year = YEAR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	7f3a      	ldrb	r2, [r7, #28]
 8000a82:	719a      	strb	r2, [r3, #6]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <DEC_TO_BCD>:

uint8_t DEC_TO_BCD(uint8_t DEC)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	return ((DEC/10)<<4) | (DEC%10);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <DEC_TO_BCD+0x44>)
 8000a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	b258      	sxtb	r0, r3
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <DEC_TO_BCD+0x44>)
 8000aae:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab2:	08d9      	lsrs	r1, r3, #3
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	b2db      	uxtb	r3, r3
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	cccccccd 	.word	0xcccccccd

08000ad8 <BCD_TO_DEC>:

uint8_t BCD_TO_DEC(uint8_t BCD)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	return ((BCD>>4)*10) + (BCD&0x0F);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	091b      	lsrs	r3, r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f003 030f 	and.w	r3, r3, #15
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	b2db      	uxtb	r3, r3
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <DS1307_WriteTime>:

void DS1307_WriteTime(TIME *TIME_Set)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
	uint8_t TIME_Transmit[8];
	TIME_Transmit[0] = SECOND_ADDR;
 8000b10:	2300      	movs	r3, #0
 8000b12:	723b      	strb	r3, [r7, #8]
	TIME_Transmit[1] = DEC_TO_BCD(TIME_Set->Second);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffb9 	bl	8000a90 <DEC_TO_BCD>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	727b      	strb	r3, [r7, #9]
	TIME_Transmit[2] = DEC_TO_BCD(TIME_Set->Minute);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffb2 	bl	8000a90 <DEC_TO_BCD>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	72bb      	strb	r3, [r7, #10]
	TIME_Transmit[3] = DEC_TO_BCD(TIME_Set->Hour);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ffab 	bl	8000a90 <DEC_TO_BCD>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	72fb      	strb	r3, [r7, #11]
	TIME_Transmit[4] = DEC_TO_BCD(TIME_Set->Day);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	78db      	ldrb	r3, [r3, #3]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ffa4 	bl	8000a90 <DEC_TO_BCD>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	733b      	strb	r3, [r7, #12]
	TIME_Transmit[5] = DEC_TO_BCD(TIME_Set->Date);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff9d 	bl	8000a90 <DEC_TO_BCD>
 8000b56:	4603      	mov	r3, r0
 8000b58:	737b      	strb	r3, [r7, #13]
	TIME_Transmit[6] = DEC_TO_BCD(TIME_Set->Month);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	795b      	ldrb	r3, [r3, #5]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff96 	bl	8000a90 <DEC_TO_BCD>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73bb      	strb	r3, [r7, #14]
	TIME_Transmit[7] = DEC_TO_BCD(TIME_Set->Year);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	799b      	ldrb	r3, [r3, #6]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff8f 	bl	8000a90 <DEC_TO_BCD>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73fb      	strb	r3, [r7, #15]
	
	/*Transmit TIME_Transmit[8]'s data(include first address of Timkeeper Register: 00h-SECONDS and timeset's data), 
	The first byte is 7 bits of DS1307_ADDR<<1 with R/W bit: Write(R/W=0)*/
	HAL_I2C_Master_Transmit(DS1307_I2C, DS1307_ADDR<<1, TIME_Transmit, 8, 100);
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <DS1307_WriteTime+0x8c>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	f107 0208 	add.w	r2, r7, #8
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	2308      	movs	r3, #8
 8000b84:	21d0      	movs	r1, #208	; 0xd0
 8000b86:	f001 fb29 	bl	80021dc <HAL_I2C_Master_Transmit>
}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000a0 	.word	0x200000a0

08000b98 <DS1307_ReadTime>:

void DS1307_ReadTime(TIME *TIME_Read)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	6078      	str	r0, [r7, #4]
	uint8_t TIME_Receive[7];
	uint8_t SecondAddress = SECOND_ADDR;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
	/*Transmit first 7 bits of DS1307_ADDR<<1 with R/W bit: Write(R/W=0)
	Then transmit the first address of Timkeeper Register: 00h-SECONDS*/
	HAL_I2C_Master_Transmit(DS1307_I2C, DS1307_ADDR<<1, &SecondAddress, 1, 100);
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <DS1307_ReadTime+0xac>)
 8000ba6:	6818      	ldr	r0, [r3, #0]
 8000ba8:	f107 020f 	add.w	r2, r7, #15
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	21d0      	movs	r1, #208	; 0xd0
 8000bb4:	f001 fb12 	bl	80021dc <HAL_I2C_Master_Transmit>
	//Read the value of Timekeeper Rigister, 6 bytes from 00h to 06D-h(SECONMINUTE-HOUR-DATE-DAY-MONTH-YEAR)
	HAL_I2C_Master_Receive(DS1307_I2C, DS1307_ADDR<<1, TIME_Receive, 7, 100);
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <DS1307_ReadTime+0xac>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f107 0210 	add.w	r2, r7, #16
 8000bc0:	2364      	movs	r3, #100	; 0x64
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	21d0      	movs	r1, #208	; 0xd0
 8000bc8:	f001 fc06 	bl	80023d8 <HAL_I2C_Master_Receive>
	
	TIME_Read->Second = BCD_TO_DEC(TIME_Receive[0]);
 8000bcc:	7c3b      	ldrb	r3, [r7, #16]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff82 	bl	8000ad8 <BCD_TO_DEC>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	701a      	strb	r2, [r3, #0]
	TIME_Read->Minute = BCD_TO_DEC(TIME_Receive[1]);
 8000bdc:	7c7b      	ldrb	r3, [r7, #17]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff7a 	bl	8000ad8 <BCD_TO_DEC>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	705a      	strb	r2, [r3, #1]
	TIME_Read->Hour = BCD_TO_DEC(TIME_Receive[2]);
 8000bec:	7cbb      	ldrb	r3, [r7, #18]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff72 	bl	8000ad8 <BCD_TO_DEC>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	709a      	strb	r2, [r3, #2]
	TIME_Read->Day = BCD_TO_DEC(TIME_Receive[3]);
 8000bfc:	7cfb      	ldrb	r3, [r7, #19]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff6a 	bl	8000ad8 <BCD_TO_DEC>
 8000c04:	4603      	mov	r3, r0
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	70da      	strb	r2, [r3, #3]
	TIME_Read->Date = BCD_TO_DEC(TIME_Receive[4]);
 8000c0c:	7d3b      	ldrb	r3, [r7, #20]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff62 	bl	8000ad8 <BCD_TO_DEC>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	711a      	strb	r2, [r3, #4]
	TIME_Read->Month = BCD_TO_DEC(TIME_Receive[5]);
 8000c1c:	7d7b      	ldrb	r3, [r7, #21]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff5a 	bl	8000ad8 <BCD_TO_DEC>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	715a      	strb	r2, [r3, #5]
	TIME_Read->Year = BCD_TO_DEC(TIME_Receive[6]);
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff52 	bl	8000ad8 <BCD_TO_DEC>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	719a      	strb	r2, [r3, #6]
}
 8000c3c:	bf00      	nop
 8000c3e:	3718      	adds	r7, #24
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000a0 	.word	0x200000a0

08000c48 <LCD_CMD_Transmit>:

#define LCD_COLUMN 16
#define LCD_ROW 2

void LCD_CMD_Transmit(uint8_t CMD)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	//RS=0: Receive command
	HAL_GPIO_WritePin(GPIOB, RS_Pin, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c58:	483e      	ldr	r0, [pc, #248]	; (8000d54 <LCD_CMD_Transmit+0x10c>)
 8000c5a:	f001 f962 	bl	8001f22 <HAL_GPIO_WritePin>

	//Transmit the first 4 bit(CMD>>4 -> [D7][D6][D5][D4])
	HAL_GPIO_WritePin(GPIOA, D4_Pin, (CMD>>4) & 0x01);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	091b      	lsrs	r3, r3, #4
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c70:	4839      	ldr	r0, [pc, #228]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000c72:	f001 f956 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_Pin, (CMD>>4) & 0x02);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c88:	4833      	ldr	r0, [pc, #204]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000c8a:	f001 f94a 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_Pin, (CMD>>4) & 0x04);
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca0:	482d      	ldr	r0, [pc, #180]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000ca2:	f001 f93e 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D7_Pin, (CMD>>4) & 0x08);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	091b      	lsrs	r3, r3, #4
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0308 	and.w	r3, r3, #8
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	4827      	ldr	r0, [pc, #156]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000cba:	f001 f932 	bl	8001f22 <HAL_GPIO_WritePin>
	//Generate EN_Pin pulse
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <LCD_CMD_Transmit+0x10c>)
 8000cc6:	f001 f92c 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fe86 	bl	80019dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	481f      	ldr	r0, [pc, #124]	; (8000d54 <LCD_CMD_Transmit+0x10c>)
 8000cd8:	f001 f923 	bl	8001f22 <HAL_GPIO_WritePin>

	//Transmit the last 4 bit(CMD -> -> [D7][D6][D5][D4])
	HAL_GPIO_WritePin(GPIOA, D4_Pin, CMD & 0x01);
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cea:	481b      	ldr	r0, [pc, #108]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000cec:	f001 f919 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_Pin, CMD & 0x02);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000d00:	f001 f90f 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_Pin, CMD & 0x04);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000d14:	f001 f905 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D7_Pin, CMD & 0x08);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d26:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LCD_CMD_Transmit+0x110>)
 8000d28:	f001 f8fb 	bl	8001f22 <HAL_GPIO_WritePin>
	//Generate EN_Pin pulse
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LCD_CMD_Transmit+0x10c>)
 8000d34:	f001 f8f5 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fe4f 	bl	80019dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <LCD_CMD_Transmit+0x10c>)
 8000d46:	f001 f8ec 	bl	8001f22 <HAL_GPIO_WritePin>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010c00 	.word	0x40010c00
 8000d58:	40010800 	.word	0x40010800

08000d5c <LCD_Init>:

void LCD_Init()
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	//Power On and wait for more than 15ms after Vcc rise to 4.5V, wait for more than 40ms after Vcc rise to 2.7V
	HAL_Delay(50);
 8000d60:	2032      	movs	r0, #50	; 0x32
 8000d62:	f000 fe3b 	bl	80019dc <HAL_Delay>
	//Special case of "Function set" (lower four bits are irrelevant) (0011 ****)
	LCD_CMD_Transmit(0x03);
 8000d66:	2003      	movs	r0, #3
 8000d68:	f7ff ff6e 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 4.1ms
	HAL_Delay(5);
 8000d6c:	2005      	movs	r0, #5
 8000d6e:	f000 fe35 	bl	80019dc <HAL_Delay>
	//Special case of "Function set" (lower four bits are irrelevant) (0011 ****)
	LCD_CMD_Transmit(0x03);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f7ff ff68 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 100us
	HAL_Delay(1);	
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f000 fe2f 	bl	80019dc <HAL_Delay>
	//Special case of "Function set" (lower four bits are irrelevant) (0011 ****)
	LCD_CMD_Transmit(0x03);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f7ff ff62 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 100us
	HAL_Delay(1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f000 fe29 	bl	80019dc <HAL_Delay>
	//Initial "Function Set" to change interface (lower four bit are irrelevant) (0010 ****)
	LCD_CMD_Transmit(0x02);
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff ff5c 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for 100us
	HAL_Delay(1);
 8000d90:	2001      	movs	r0, #1
 8000d92:	f000 fe23 	bl	80019dc <HAL_Delay>

	//Function Set (001[DL] [N][F][*][*]): 4 bit(DL=0), 2 lines(N=1), font=5x8 dots(F=0(N=1))
	LCD_CMD_Transmit(0x20 | 0x00 | 0x08 | 0x00);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f7ff ff56 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 53us or until busy flag is clear
	HAL_Delay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fe1d 	bl	80019dc <HAL_Delay>
	
	//Display ON/OFF (0000 1[D][C][B]): display off(D=0), display cursor off(C=0), character blink off(B=0)
	LCD_CMD_Transmit(0x08 | 0x00 | 0x00 | 0x00);
 8000da2:	2008      	movs	r0, #8
 8000da4:	f7ff ff50 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 53us or until busy flag is clear
	HAL_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fe17 	bl	80019dc <HAL_Delay>
	
	//Clear Display (0000 0001): clears all display and returns cursor to the home position(Address 0)
	LCD_CMD_Transmit(0x01);
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff ff4a 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 3ms or until busy flag is clear
	HAL_Delay(3);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 fe11 	bl	80019dc <HAL_Delay>
	
	//Entry Mode Set (0000 01[I/D][S]: increment(I/D=1), display stand(S=0)
	LCD_CMD_Transmit(0x04 | 0x02 | 0x00);
 8000dba:	2006      	movs	r0, #6
 8000dbc:	f7ff ff44 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 53us or until busy flag is clear
	HAL_Delay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f000 fe0b 	bl	80019dc <HAL_Delay>

	//Display ON/OFF (0000 1[D][C][B]): display on(D=1), display cursor off(C=0), character blink off(B=0)
	LCD_CMD_Transmit(0x08 | 0x04 | 0x00 | 0x00);
 8000dc6:	200c      	movs	r0, #12
 8000dc8:	f7ff ff3e 	bl	8000c48 <LCD_CMD_Transmit>
	//Wait for more than 53us or until busy flag is clear
	HAL_Delay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fe05 	bl	80019dc <HAL_Delay>
	
//	//Cursor and Display Shift (0001 [S/R][R/L][*][*]: Shift cursor to the right (S/R=0, R/L=1)(Address Counter is incremented by 1)
//	LCD_CMD_Transmit(0x01 | 0x00 | 0x04);

	//Return Home (0000 001[*]): returns the cursor to the home position (Address 0), returns display to its original state if it was shifted
	LCD_CMD_Transmit(0x02);
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff ff38 	bl	8000c48 <LCD_CMD_Transmit>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LCD_DATA_Transmit>:

void LCD_DATA_Transmit(uint8_t DATA)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	//RS=1: Receive data
	HAL_GPIO_WritePin(GPIOB, RS_Pin, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dec:	483e      	ldr	r0, [pc, #248]	; (8000ee8 <LCD_DATA_Transmit+0x10c>)
 8000dee:	f001 f898 	bl	8001f22 <HAL_GPIO_WritePin>

	//Transmit the first 4 bit(CMD>>4)
	HAL_GPIO_WritePin(GPIOA, D4_Pin, (DATA>>4) & 0x01);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	4839      	ldr	r0, [pc, #228]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000e06:	f001 f88c 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_Pin, (DATA>>4) & 0x02);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	4833      	ldr	r0, [pc, #204]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000e1e:	f001 f880 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_Pin, (DATA>>4) & 0x04);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000e36:	f001 f874 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D7_Pin, (DATA>>4) & 0x08);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	091b      	lsrs	r3, r3, #4
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4c:	4827      	ldr	r0, [pc, #156]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000e4e:	f001 f868 	bl	8001f22 <HAL_GPIO_WritePin>
	//Generate EN_Pin pulse
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 1);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e58:	4823      	ldr	r0, [pc, #140]	; (8000ee8 <LCD_DATA_Transmit+0x10c>)
 8000e5a:	f001 f862 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f000 fdbc 	bl	80019dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	481f      	ldr	r0, [pc, #124]	; (8000ee8 <LCD_DATA_Transmit+0x10c>)
 8000e6c:	f001 f859 	bl	8001f22 <HAL_GPIO_WritePin>

	//Transmit the last 4 bit(CMD)
	HAL_GPIO_WritePin(GPIOA, D4_Pin, DATA & 0x01);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000e80:	f001 f84f 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_Pin, DATA & 0x02);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000e94:	f001 f845 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_Pin, DATA & 0x04);
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000ea8:	f001 f83b 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D7_Pin, DATA & 0x08);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eba:	480c      	ldr	r0, [pc, #48]	; (8000eec <LCD_DATA_Transmit+0x110>)
 8000ebc:	f001 f831 	bl	8001f22 <HAL_GPIO_WritePin>
	//Generate EN_Pin pulse
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <LCD_DATA_Transmit+0x10c>)
 8000ec8:	f001 f82b 	bl	8001f22 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fd85 	bl	80019dc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, EN_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed8:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <LCD_DATA_Transmit+0x10c>)
 8000eda:	f001 f822 	bl	8001f22 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40010800 	.word	0x40010800

08000ef0 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t Row, uint8_t Column)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	460a      	mov	r2, r1
 8000efa:	71fb      	strb	r3, [r7, #7]
 8000efc:	4613      	mov	r3, r2
 8000efe:	71bb      	strb	r3, [r7, #6]
	if(Column<LCD_COLUMN && Row<LCD_ROW)
 8000f00:	79bb      	ldrb	r3, [r7, #6]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d816      	bhi.n	8000f34 <LCD_Set_Cursor+0x44>
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d813      	bhi.n	8000f34 <LCD_Set_Cursor+0x44>
	{
		uint8_t ADDR=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
		switch (Row){
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <LCD_Set_Cursor+0x2c>
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d004      	beq.n	8000f24 <LCD_Set_Cursor+0x34>
				break;
			case 1:
				ADDR = 0xC0 + Column;
				break;
			default:
				break;
 8000f1a:	e007      	b.n	8000f2c <LCD_Set_Cursor+0x3c>
				ADDR = 0x80 + Column;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	3b80      	subs	r3, #128	; 0x80
 8000f20:	73fb      	strb	r3, [r7, #15]
				break;
 8000f22:	e003      	b.n	8000f2c <LCD_Set_Cursor+0x3c>
				ADDR = 0xC0 + Column;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	3b40      	subs	r3, #64	; 0x40
 8000f28:	73fb      	strb	r3, [r7, #15]
				break;
 8000f2a:	bf00      	nop
		}
		LCD_CMD_Transmit(ADDR);
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fe8a 	bl	8000c48 <LCD_CMD_Transmit>
	}
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LCD_Clear>:

void LCD_Clear()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	//Clear Display (0000 0001): clears all display and returns cursor to the home position(Address 0)
	LCD_CMD_Transmit(0x01);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fe81 	bl	8000c48 <LCD_CMD_Transmit>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <LCD_Write_String>:

void LCD_Write_String(char *string)
{
 8000f4a:	b590      	push	{r4, r7, lr}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i<strlen(string); i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e009      	b.n	8000f6c <LCD_Write_String+0x22>
	{
		LCD_DATA_Transmit(string[i]);
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff3b 	bl	8000ddc <LCD_DATA_Transmit>
	for(uint8_t i=0; i<strlen(string); i++)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	7bfc      	ldrb	r4, [r7, #15]
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff f8ec 	bl	800014c <strlen>
 8000f74:	4603      	mov	r3, r0
 8000f76:	429c      	cmp	r4, r3
 8000f78:	d3ee      	bcc.n	8000f58 <LCD_Write_String+0xe>
	}
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}

08000f84 <LCD_Printf>:

void LCD_Printf(const char *String, ...)
{
 8000f84:	b40f      	push	{r0, r1, r2, r3}
 8000f86:	b590      	push	{r4, r7, lr}
 8000f88:	b087      	sub	sp, #28
 8000f8a:	af00      	add	r7, sp, #0
	char StringArray[16];
	va_list args;
	va_start(args, String);
 8000f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f90:	603b      	str	r3, [r7, #0]
	vsprintf(StringArray, String, args);
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fed1 	bl	8003d40 <vsiprintf>
	va_end(args);
	
	for(uint8_t i=0; i<strlen(StringArray) && i<LCD_COLUMN; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]
 8000fa2:	e00a      	b.n	8000fba <LCD_Printf+0x36>
	{
		LCD_DATA_Transmit((uint8_t)StringArray[i]);
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	443b      	add	r3, r7
 8000faa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff14 	bl	8000ddc <LCD_DATA_Transmit>
	for(uint8_t i=0; i<strlen(StringArray) && i<LCD_COLUMN; i++)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	7dfc      	ldrb	r4, [r7, #23]
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f8c4 	bl	800014c <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	429c      	cmp	r4, r3
 8000fc8:	d202      	bcs.n	8000fd0 <LCD_Printf+0x4c>
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d9e9      	bls.n	8000fa4 <LCD_Printf+0x20>
	}
 8000fd0:	bf00      	nop
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fda:	b004      	add	sp, #16
 8000fdc:	4770      	bx	lr
	...

08000fe0 <MENU_Handle>:
#include "MENU.h"

void MENU_Handle(MODE *DISPLAY, OPTION *OPTION_Choose, TIME *TIME_DS1307, TIME *TIME_Display, DHT11_Typedef *_DHT11_Menu)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
	if(DISPLAY->Current == MAIN_MENU)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11e      	bne.n	8001034 <MENU_Handle+0x54>
	{
		switch(OPTION_Choose->Current)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d81d      	bhi.n	800103a <MENU_Handle+0x5a>
 8000ffe:	a201      	add	r2, pc, #4	; (adr r2, 8001004 <MENU_Handle+0x24>)
 8001000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001004:	08001039 	.word	0x08001039
 8001008:	08001015 	.word	0x08001015
 800100c:	0800101f 	.word	0x0800101f
 8001010:	0800102b 	.word	0x0800102b
		{
			case SET_TIME:
				OPTION_SetTimeHandle(TIME_DS1307, TIME_Display);
 8001014:	6839      	ldr	r1, [r7, #0]
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f814 	bl	8001044 <OPTION_SetTimeHandle>
				break;
 800101c:	e00d      	b.n	800103a <MENU_Handle+0x5a>
			
			case TEMP:
				DHT11_Handle();
 800101e:	f7ff fa8d 	bl	800053c <DHT11_Handle>
				OPTION_TempHandle(_DHT11_Menu);
 8001022:	69b8      	ldr	r0, [r7, #24]
 8001024:	f000 f848 	bl	80010b8 <OPTION_TempHandle>
				break;
 8001028:	e007      	b.n	800103a <MENU_Handle+0x5a>
			
			case EXIT:
				OPTION_ExitHandle(DISPLAY, OPTION_Choose);
 800102a:	68b9      	ldr	r1, [r7, #8]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f877 	bl	8001120 <OPTION_ExitHandle>
				break;
 8001032:	e002      	b.n	800103a <MENU_Handle+0x5a>
			
			case NO_CHOOSE:
				break;
		}
	}
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <MENU_Handle+0x5a>
				break;
 8001038:	bf00      	nop
}
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop

08001044 <OPTION_SetTimeHandle>:

void OPTION_SetTimeHandle(TIME *TIME_DS1307, TIME *TIME_Display)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	if(TIME_DS1307->Minute != TIME_Display->Minute)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	785a      	ldrb	r2, [r3, #1]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	785b      	ldrb	r3, [r3, #1]
 8001056:	429a      	cmp	r2, r3
 8001058:	d027      	beq.n	80010aa <OPTION_SetTimeHandle+0x66>
	{
		LCD_Set_Cursor(1,7);
 800105a:	2107      	movs	r1, #7
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ff47 	bl	8000ef0 <LCD_Set_Cursor>
		LCD_Printf("%02d", TIME_DS1307->Minute);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4619      	mov	r1, r3
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <OPTION_SetTimeHandle+0x70>)
 800106a:	f7ff ff8b 	bl	8000f84 <LCD_Printf>
		TIME_Display->Minute = TIME_DS1307->Minute;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	785a      	ldrb	r2, [r3, #1]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	705a      	strb	r2, [r3, #1]
		DS1307_WriteTime(TIME_DS1307);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fd46 	bl	8000b08 <DS1307_WriteTime>
		if(TIME_DS1307->Hour != TIME_Display->Hour)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	789a      	ldrb	r2, [r3, #2]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	429a      	cmp	r2, r3
 8001086:	d010      	beq.n	80010aa <OPTION_SetTimeHandle+0x66>
		{
			LCD_Set_Cursor(1,4);
 8001088:	2104      	movs	r1, #4
 800108a:	2001      	movs	r0, #1
 800108c:	f7ff ff30 	bl	8000ef0 <LCD_Set_Cursor>
			LCD_Printf("%02d", TIME_DS1307->Hour);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	4619      	mov	r1, r3
 8001096:	4807      	ldr	r0, [pc, #28]	; (80010b4 <OPTION_SetTimeHandle+0x70>)
 8001098:	f7ff ff74 	bl	8000f84 <LCD_Printf>
			TIME_Display->Hour = TIME_DS1307->Hour;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	789a      	ldrb	r2, [r3, #2]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	709a      	strb	r2, [r3, #2]
			DS1307_WriteTime(TIME_DS1307);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fd2f 	bl	8000b08 <DS1307_WriteTime>
		}
	}
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	08004760 	.word	0x08004760

080010b8 <OPTION_TempHandle>:

void OPTION_TempHandle(DHT11_Typedef *DHT11_Menu)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if(DHT11_Menu->TEMP_Data.Current != DHT11_Menu->TEMP_Data.Display)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	88da      	ldrh	r2, [r3, #6]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	891b      	ldrh	r3, [r3, #8]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d00d      	beq.n	80010e8 <OPTION_TempHandle+0x30>
	{
		LCD_Set_Cursor(0,0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff0e 	bl	8000ef0 <LCD_Set_Cursor>
		LCD_Printf("Temperature: %02d", DHT11_Menu->TEMP_Data.Current);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	88db      	ldrh	r3, [r3, #6]
 80010d8:	4619      	mov	r1, r3
 80010da:	480f      	ldr	r0, [pc, #60]	; (8001118 <OPTION_TempHandle+0x60>)
 80010dc:	f7ff ff52 	bl	8000f84 <LCD_Printf>

		DHT11_Menu->TEMP_Data.Display = DHT11_Menu->TEMP_Data.Current;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	88da      	ldrh	r2, [r3, #6]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	811a      	strh	r2, [r3, #8]
	}
	
	if(DHT11_Menu->HUMI_Data.Current != DHT11_Menu->HUMI_Data.Display)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	895a      	ldrh	r2, [r3, #10]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	899b      	ldrh	r3, [r3, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d00d      	beq.n	8001110 <OPTION_TempHandle+0x58>
	{
		LCD_Set_Cursor(1,0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff fefa 	bl	8000ef0 <LCD_Set_Cursor>
		LCD_Printf("Humidity: %02d", DHT11_Menu->HUMI_Data.Current);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	895b      	ldrh	r3, [r3, #10]
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <OPTION_TempHandle+0x64>)
 8001104:	f7ff ff3e 	bl	8000f84 <LCD_Printf>
		
		DHT11_Menu->HUMI_Data.Display = DHT11_Menu->HUMI_Data.Current;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	895a      	ldrh	r2, [r3, #10]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	819a      	strh	r2, [r3, #12]
	}
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08004768 	.word	0x08004768
 800111c:	0800477c 	.word	0x0800477c

08001120 <OPTION_ExitHandle>:

void OPTION_ExitHandle(MODE *DISPLAY, OPTION *OPTION_Choose)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	DISPLAY->Current = CLOCK_DISPLAY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
	OPTION_Choose->Current = NO_CHOOSE;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <ROTARY_ENCODER_Handle>:
#include "ROTARY_ENCODER.h"

void ROTARY_ENCODER_Handle(ROTARY_State *RE_State, MODE *DISPLAY, OPTION *OPTION_Choose, OPTION *OPTION_Point, TIME *TIME_DS1307)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
	ROTARY_ENCODER_Detect(RE_State);
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f80c 	bl	800116c <ROTARY_ENCODER_Detect>
	ROTARY_SignalHandle(RE_State, DISPLAY, OPTION_Choose, OPTION_Point, TIME_DS1307);
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f000 f868 	bl	8001234 <ROTARY_SignalHandle>
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <ROTARY_ENCODER_Detect>:

void ROTARY_ENCODER_Detect(ROTARY_State *RE_State)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOA, CLK_Pin) == 0)
 8001174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <ROTARY_ENCODER_Detect+0xc0>)
 800117a:	f000 febb 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d123      	bne.n	80011cc <ROTARY_ENCODER_Detect+0x60>
	{
		if(HAL_GPIO_ReadPin(GPIOB, DT_Pin) == 1)
 8001184:	2108      	movs	r1, #8
 8001186:	482a      	ldr	r0, [pc, #168]	; (8001230 <ROTARY_ENCODER_Detect+0xc4>)
 8001188:	f000 feb4 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d148      	bne.n	8001224 <ROTARY_ENCODER_Detect+0xb8>
		{
			while(HAL_GPIO_ReadPin(GPIOB, DT_Pin) == 1);
 8001192:	bf00      	nop
 8001194:	2108      	movs	r1, #8
 8001196:	4826      	ldr	r0, [pc, #152]	; (8001230 <ROTARY_ENCODER_Detect+0xc4>)
 8001198:	f000 feac 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d0f8      	beq.n	8001194 <ROTARY_ENCODER_Detect+0x28>
			*RE_State = FOLLOW_CW;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
			while(HAL_GPIO_ReadPin(GPIOA, CLK_Pin) == 0);
 80011a8:	bf00      	nop
 80011aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <ROTARY_ENCODER_Detect+0xc0>)
 80011b0:	f000 fea0 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d0f7      	beq.n	80011aa <ROTARY_ENCODER_Detect+0x3e>
			while(HAL_GPIO_ReadPin(GPIOB, DT_Pin) == 0);
 80011ba:	bf00      	nop
 80011bc:	2108      	movs	r1, #8
 80011be:	481c      	ldr	r0, [pc, #112]	; (8001230 <ROTARY_ENCODER_Detect+0xc4>)
 80011c0:	f000 fe98 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f8      	beq.n	80011bc <ROTARY_ENCODER_Detect+0x50>
			*RE_State = ANTI_CW;
			while(HAL_GPIO_ReadPin(GPIOB,DT_Pin) == 0);
			while(HAL_GPIO_ReadPin(GPIOA, CLK_Pin) == 0);
		}
	}
}
 80011ca:	e02b      	b.n	8001224 <ROTARY_ENCODER_Detect+0xb8>
	else if(HAL_GPIO_ReadPin(GPIOB, DT_Pin) == 0)
 80011cc:	2108      	movs	r1, #8
 80011ce:	4818      	ldr	r0, [pc, #96]	; (8001230 <ROTARY_ENCODER_Detect+0xc4>)
 80011d0:	f000 fe90 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d124      	bne.n	8001224 <ROTARY_ENCODER_Detect+0xb8>
		if(HAL_GPIO_ReadPin(GPIOA, CLK_Pin) == 1)
 80011da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <ROTARY_ENCODER_Detect+0xc0>)
 80011e0:	f000 fe88 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d11c      	bne.n	8001224 <ROTARY_ENCODER_Detect+0xb8>
			while(HAL_GPIO_ReadPin(GPIOA, CLK_Pin) == 1);
 80011ea:	bf00      	nop
 80011ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <ROTARY_ENCODER_Detect+0xc0>)
 80011f2:	f000 fe7f 	bl	8001ef4 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d0f7      	beq.n	80011ec <ROTARY_ENCODER_Detect+0x80>
			*RE_State = ANTI_CW;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	701a      	strb	r2, [r3, #0]
			while(HAL_GPIO_ReadPin(GPIOB,DT_Pin) == 0);
 8001202:	bf00      	nop
 8001204:	2108      	movs	r1, #8
 8001206:	480a      	ldr	r0, [pc, #40]	; (8001230 <ROTARY_ENCODER_Detect+0xc4>)
 8001208:	f000 fe74 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f8      	beq.n	8001204 <ROTARY_ENCODER_Detect+0x98>
			while(HAL_GPIO_ReadPin(GPIOA, CLK_Pin) == 0);
 8001212:	bf00      	nop
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <ROTARY_ENCODER_Detect+0xc0>)
 800121a:	f000 fe6b 	bl	8001ef4 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f7      	beq.n	8001214 <ROTARY_ENCODER_Detect+0xa8>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40010800 	.word	0x40010800
 8001230:	40010c00 	.word	0x40010c00

08001234 <ROTARY_SignalHandle>:

void ROTARY_SignalHandle(ROTARY_State *RE_State, MODE *DISPLAY, OPTION *OPTION_Choose, OPTION *OPTION_Point, TIME *TIME_DS1307)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	603b      	str	r3, [r7, #0]
	if(*RE_State != STAND)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d017      	beq.n	800127a <ROTARY_SignalHandle+0x46>
	{
		switch(*RE_State)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d002      	beq.n	8001258 <ROTARY_SignalHandle+0x24>
 8001252:	2b02      	cmp	r3, #2
 8001254:	d007      	beq.n	8001266 <ROTARY_SignalHandle+0x32>
			case ANTI_CW:
				ROTARY_AntiCW_Handle(DISPLAY, OPTION_Choose, OPTION_Point, TIME_DS1307);
				break;
			
			default:
				break;
 8001256:	e00d      	b.n	8001274 <ROTARY_SignalHandle+0x40>
				ROTARY_FollowCW_Handle(DISPLAY, OPTION_Choose, OPTION_Point, TIME_DS1307);
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	68b8      	ldr	r0, [r7, #8]
 8001260:	f000 f80f 	bl	8001282 <ROTARY_FollowCW_Handle>
				break;
 8001264:	e006      	b.n	8001274 <ROTARY_SignalHandle+0x40>
				ROTARY_AntiCW_Handle(DISPLAY, OPTION_Choose, OPTION_Point, TIME_DS1307);
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	68b8      	ldr	r0, [r7, #8]
 800126e:	f000 f84f 	bl	8001310 <ROTARY_AntiCW_Handle>
				break;
 8001272:	bf00      	nop
		}
		*RE_State = STAND;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	}
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <ROTARY_FollowCW_Handle>:

void ROTARY_FollowCW_Handle(MODE *DISPLAY, OPTION *OPTION_Choose, OPTION *OPTION_Point, TIME *TIME_DS1307)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	603b      	str	r3, [r7, #0]
	if((DISPLAY->Current == MAIN_MENU) && (OPTION_Choose->Current == NO_CHOOSE))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d112      	bne.n	80012be <ROTARY_FollowCW_Handle+0x3c>
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10e      	bne.n	80012be <ROTARY_FollowCW_Handle+0x3c>
	{
		if(OPTION_Point->Current == EXIT) OPTION_Point->Current = SET_TIME;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d103      	bne.n	80012b0 <ROTARY_FollowCW_Handle+0x2e>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	e02a      	b.n	8001306 <ROTARY_FollowCW_Handle+0x84>
		else OPTION_Point->Current++;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	701a      	strb	r2, [r3, #0]
		if(OPTION_Point->Current == EXIT) OPTION_Point->Current = SET_TIME;
 80012bc:	e023      	b.n	8001306 <ROTARY_FollowCW_Handle+0x84>
	}else if((DISPLAY->Current == MAIN_MENU) && (OPTION_Choose->Current != NO_CHOOSE))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d11c      	bne.n	8001300 <ROTARY_FollowCW_Handle+0x7e>
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d018      	beq.n	8001300 <ROTARY_FollowCW_Handle+0x7e>
	{
		switch(OPTION_Choose->Current)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d116      	bne.n	8001304 <ROTARY_FollowCW_Handle+0x82>
		{
			case SET_TIME:
				if(TIME_DS1307->Minute == 59)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	2b3b      	cmp	r3, #59	; 0x3b
 80012dc:	d109      	bne.n	80012f2 <ROTARY_FollowCW_Handle+0x70>
				{
					TIME_DS1307->Minute = 0;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	705a      	strb	r2, [r3, #1]
					TIME_DS1307->Hour++;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	789b      	ldrb	r3, [r3, #2]
 80012e8:	3301      	adds	r3, #1
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	709a      	strb	r2, [r3, #2]
				}else
					TIME_DS1307->Minute++;
				break;
 80012f0:	e009      	b.n	8001306 <ROTARY_FollowCW_Handle+0x84>
					TIME_DS1307->Minute++;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	785b      	ldrb	r3, [r3, #1]
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	705a      	strb	r2, [r3, #1]
				break;
 80012fe:	e002      	b.n	8001306 <ROTARY_FollowCW_Handle+0x84>
				
			default:
				break;
		}
	}
 8001300:	bf00      	nop
 8001302:	e000      	b.n	8001306 <ROTARY_FollowCW_Handle+0x84>
				break;
 8001304:	bf00      	nop
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <ROTARY_AntiCW_Handle>:

void ROTARY_AntiCW_Handle(MODE *DISPLAY, OPTION *OPTION_Choose, OPTION *OPTION_Point, TIME *TIME_DS1307)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	if((DISPLAY->Current == MAIN_MENU) && (OPTION_Choose->Current == NO_CHOOSE))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d112      	bne.n	800134c <ROTARY_AntiCW_Handle+0x3c>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10e      	bne.n	800134c <ROTARY_AntiCW_Handle+0x3c>
	{
		if(OPTION_Point->Current == SET_TIME) OPTION_Point->Current = EXIT;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d103      	bne.n	800133e <ROTARY_AntiCW_Handle+0x2e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e02a      	b.n	8001394 <ROTARY_AntiCW_Handle+0x84>
		else OPTION_Point->Current--;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	701a      	strb	r2, [r3, #0]
		if(OPTION_Point->Current == SET_TIME) OPTION_Point->Current = EXIT;
 800134a:	e023      	b.n	8001394 <ROTARY_AntiCW_Handle+0x84>
	}else if((DISPLAY->Current == MAIN_MENU) && (OPTION_Choose->Current != NO_CHOOSE))
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d11c      	bne.n	800138e <ROTARY_AntiCW_Handle+0x7e>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d018      	beq.n	800138e <ROTARY_AntiCW_Handle+0x7e>
	{
		switch(OPTION_Choose->Current)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d116      	bne.n	8001392 <ROTARY_AntiCW_Handle+0x82>
		{
			case SET_TIME:
				if(TIME_DS1307->Minute == 0)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	785b      	ldrb	r3, [r3, #1]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <ROTARY_AntiCW_Handle+0x70>
				{
					TIME_DS1307->Minute = 59;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	223b      	movs	r2, #59	; 0x3b
 8001370:	705a      	strb	r2, [r3, #1]
					TIME_DS1307->Hour--;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	3b01      	subs	r3, #1
 8001378:	b2da      	uxtb	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	709a      	strb	r2, [r3, #2]
				}else
					TIME_DS1307->Minute--;
				break;
 800137e:	e009      	b.n	8001394 <ROTARY_AntiCW_Handle+0x84>
					TIME_DS1307->Minute--;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	3b01      	subs	r3, #1
 8001386:	b2da      	uxtb	r2, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	705a      	strb	r2, [r3, #1]
				break;
 800138c:	e002      	b.n	8001394 <ROTARY_AntiCW_Handle+0x84>
				
			default:
				break;
		}
	}
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <ROTARY_AntiCW_Handle+0x84>
				break;
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
	...

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a6:	f000 fab7 	bl	8001918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f879 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f000 f931 	bl	8001614 <MX_GPIO_Init>
  MX_I2C2_Init();
 80013b2:	f000 f8b1 	bl	8001518 <MX_I2C2_Init>
  MX_TIM1_Init();
 80013b6:	f000 f8dd 	bl	8001574 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	DELAY_Init(&htim1);
 80013ba:	482d      	ldr	r0, [pc, #180]	; (8001470 <main+0xd0>)
 80013bc:	f7fe ff84 	bl	80002c8 <DELAY_Init>
	LCD_Init();
 80013c0:	f7ff fccc 	bl	8000d5c <LCD_Init>
	DS1307_Init(&hi2c2);
 80013c4:	482b      	ldr	r0, [pc, #172]	; (8001474 <main+0xd4>)
 80013c6:	f7ff fb2d 	bl	8000a24 <DS1307_Init>
	DHT11_Init(&DHT, GPIOA, DHT11_Pin);
 80013ca:	2201      	movs	r2, #1
 80013cc:	492a      	ldr	r1, [pc, #168]	; (8001478 <main+0xd8>)
 80013ce:	482b      	ldr	r0, [pc, #172]	; (800147c <main+0xdc>)
 80013d0:	f7fe ffaa 	bl	8000328 <DHT11_Init>
	TIME_Init(&TIME_DS1307, 30, 32, 9, 5, 4, 2, 23);
 80013d4:	2317      	movs	r3, #23
 80013d6:	9303      	str	r3, [sp, #12]
 80013d8:	2302      	movs	r3, #2
 80013da:	9302      	str	r3, [sp, #8]
 80013dc:	2304      	movs	r3, #4
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	2305      	movs	r3, #5
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2309      	movs	r3, #9
 80013e6:	2220      	movs	r2, #32
 80013e8:	211e      	movs	r1, #30
 80013ea:	4825      	ldr	r0, [pc, #148]	; (8001480 <main+0xe0>)
 80013ec:	f7ff fb28 	bl	8000a40 <TIME_Init>
	DS1307_WriteTime(&TIME_DS1307);
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <main+0xe0>)
 80013f2:	f7ff fb89 	bl	8000b08 <DS1307_WriteTime>
	DS1307_ReadTime(&TIME_DS1307);
 80013f6:	4822      	ldr	r0, [pc, #136]	; (8001480 <main+0xe0>)
 80013f8:	f7ff fbce 	bl	8000b98 <DS1307_ReadTime>
	TIME_Init(&TIME_Display, 0, 0, 0, 0, 0, 0, 0);
 80013fc:	2300      	movs	r3, #0
 80013fe:	9303      	str	r3, [sp, #12]
 8001400:	2300      	movs	r3, #0
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2300      	movs	r3, #0
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	481c      	ldr	r0, [pc, #112]	; (8001484 <main+0xe4>)
 8001414:	f7ff fb14 	bl	8000a40 <TIME_Init>

	DISPLAY.Current = CLOCK_DISPLAY;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <main+0xe8>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
	DISPLAY.Last = MAIN_MENU;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <main+0xe8>)
 8001420:	2200      	movs	r2, #0
 8001422:	705a      	strb	r2, [r3, #1]
	OPTION_Point.Current = SET_TIME;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <main+0xec>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	BUTTON_Handle(&SW, GPIOB, SW_Pin, &DISPLAY, &OPTION_Choose, &OPTION_Point);
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <main+0xec>)
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <main+0xf0>)
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <main+0xe8>)
 8001434:	2210      	movs	r2, #16
 8001436:	4917      	ldr	r1, [pc, #92]	; (8001494 <main+0xf4>)
 8001438:	4817      	ldr	r0, [pc, #92]	; (8001498 <main+0xf8>)
 800143a:	f7fe fe8f 	bl	800015c <BUTTON_Handle>
	ROTARY_ENCODER_Handle(&RE, &DISPLAY, &OPTION_Choose, &OPTION_Point, &TIME_DS1307);
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <main+0xe0>)
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <main+0xec>)
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <main+0xf0>)
 8001446:	4910      	ldr	r1, [pc, #64]	; (8001488 <main+0xe8>)
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <main+0xfc>)
 800144a:	f7ff fe79 	bl	8001140 <ROTARY_ENCODER_Handle>
	DISPLAY_Handle(&TIME_DS1307, &TIME_Display, &DISPLAY, &OPTION_Choose, &OPTION_Point);
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <main+0xec>)
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <main+0xf0>)
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <main+0xe8>)
 8001456:	490b      	ldr	r1, [pc, #44]	; (8001484 <main+0xe4>)
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <main+0xe0>)
 800145a:	f7ff f8a5 	bl	80005a8 <DISPLAY_Handle>
	MENU_Handle(&DISPLAY, &OPTION_Choose, &TIME_DS1307, &TIME_Display, &DHT);
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <main+0xdc>)
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <main+0xe4>)
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <main+0xe0>)
 8001466:	490a      	ldr	r1, [pc, #40]	; (8001490 <main+0xf0>)
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <main+0xe8>)
 800146a:	f7ff fdb9 	bl	8000fe0 <MENU_Handle>
	BUTTON_Handle(&SW, GPIOB, SW_Pin, &DISPLAY, &OPTION_Choose, &OPTION_Point);
 800146e:	e7dc      	b.n	800142a <main+0x8a>
 8001470:	200000f8 	.word	0x200000f8
 8001474:	200000a4 	.word	0x200000a4
 8001478:	40010800 	.word	0x40010800
 800147c:	20000170 	.word	0x20000170
 8001480:	20000154 	.word	0x20000154
 8001484:	2000015c 	.word	0x2000015c
 8001488:	2000016c 	.word	0x2000016c
 800148c:	20000168 	.word	0x20000168
 8001490:	20000164 	.word	0x20000164
 8001494:	40010c00 	.word	0x40010c00
 8001498:	20000140 	.word	0x20000140
 800149c:	20000150 	.word	0x20000150

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fc28 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c6:	2301      	movs	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ca:	2310      	movs	r3, #16
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d2:	f107 0318 	add.w	r3, r7, #24
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 fd0a 	bl	8002ef0 <HAL_RCC_OscConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014e2:	f000 f8f9 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e6:	230f      	movs	r3, #15
 80014e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 ff78 	bl	80033f4 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800150a:	f000 f8e5 	bl	80016d8 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3740      	adds	r7, #64	; 0x40
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C2_Init+0x50>)
 800151e:	4a13      	ldr	r2, [pc, #76]	; (800156c <MX_I2C2_Init+0x54>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C2_Init+0x50>)
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <MX_I2C2_Init+0x58>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C2_Init+0x50>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_I2C2_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_I2C2_Init+0x50>)
 8001536:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_I2C2_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_I2C2_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_I2C2_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_I2C2_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_I2C2_Init+0x50>)
 8001556:	f000 fcfd 	bl	8001f54 <HAL_I2C_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001560:	f000 f8ba 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200000a4 	.word	0x200000a4
 800156c:	40005800 	.word	0x40005800
 8001570:	000186a0 	.word	0x000186a0

08001574 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <MX_TIM1_Init+0x98>)
 8001592:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <MX_TIM1_Init+0x9c>)
 8001594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM1_Init+0x98>)
 8001598:	2207      	movs	r2, #7
 800159a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_TIM1_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_TIM1_Init+0x98>)
 80015a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM1_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <MX_TIM1_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <MX_TIM1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <MX_TIM1_Init+0x98>)
 80015be:	f002 f89d 	bl	80036fc <HAL_TIM_Base_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 f886 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	; (800160c <MX_TIM1_Init+0x98>)
 80015da:	f002 f94f 	bl	800387c <HAL_TIM_ConfigClockSource>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015e4:	f000 f878 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_TIM1_Init+0x98>)
 80015f6:	f002 fafd 	bl	8003bf4 <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001600:	f000 f86a 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200000f8 	.word	0x200000f8
 8001610:	40012c00 	.word	0x40012c00

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <MX_GPIO_Init+0xb8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <MX_GPIO_Init+0xb8>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <MX_GPIO_Init+0xb8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_GPIO_Init+0xb8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <MX_GPIO_Init+0xb8>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_GPIO_Init+0xb8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|RW_Pin|EN_Pin|BL_Pin
 8001658:	2200      	movs	r2, #0
 800165a:	f24f 0118 	movw	r1, #61464	; 0xf018
 800165e:	481c      	ldr	r0, [pc, #112]	; (80016d0 <MX_GPIO_Init+0xbc>)
 8001660:	f000 fc5f 	bl	8001f22 <HAL_GPIO_WritePin>
                          |DT_Pin|SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 410f 	mov.w	r1, #36608	; 0x8f00
 800166a:	481a      	ldr	r0, [pc, #104]	; (80016d4 <MX_GPIO_Init+0xc0>)
 800166c:	f000 fc59 	bl	8001f22 <HAL_GPIO_WritePin>
                          |CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001670:	2301      	movs	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	4619      	mov	r1, r3
 8001682:	4814      	ldr	r0, [pc, #80]	; (80016d4 <MX_GPIO_Init+0xc0>)
 8001684:	f000 fab2 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin BL_Pin
                           DT_Pin SW_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|BL_Pin
 8001688:	f24f 0318 	movw	r3, #61464	; 0xf018
 800168c:	60bb      	str	r3, [r7, #8]
                          |DT_Pin|SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2302      	movs	r3, #2
 8001698:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4619      	mov	r1, r3
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <MX_GPIO_Init+0xbc>)
 80016a2:	f000 faa3 	bl	8001bec <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           CLK_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016a6:	f44f 430f 	mov.w	r3, #36608	; 0x8f00
 80016aa:	60bb      	str	r3, [r7, #8]
                          |CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2302      	movs	r3, #2
 80016b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4619      	mov	r1, r3
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_GPIO_Init+0xc0>)
 80016c0:	f000 fa94 	bl	8001bec <HAL_GPIO_Init>

}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010c00 	.word	0x40010c00
 80016d4:	40010800 	.word	0x40010800

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_MspInit+0x5c>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_MspInit+0x5c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_MspInit+0x5c>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x5c>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x5c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x5c>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_MspInit+0x60>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_MspInit+0x60>)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000

08001748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <HAL_I2C_MspInit+0x74>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d124      	bne.n	80017b2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001780:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001786:	2312      	movs	r3, #18
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <HAL_I2C_MspInit+0x7c>)
 8001796:	f000 fa29 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 80017a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_I2C_MspInit+0x78>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40005800 	.word	0x40005800
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0x34>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10b      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_TIM_Base_MspInit+0x38>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_TIM_Base_MspInit+0x38>)
 80017e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017e4:	6193      	str	r3, [r2, #24]
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_TIM_Base_MspInit+0x38>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40021000 	.word	0x40021000

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr

08001846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184a:	f000 f8ab 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <_sbrk+0x5c>)
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <_sbrk+0x60>)
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <_sbrk+0x64>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <_sbrk+0x68>)
 8001874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	429a      	cmp	r2, r3
 8001882:	d207      	bcs.n	8001894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001884:	f002 fa14 	bl	8003cb0 <__errno>
 8001888:	4603      	mov	r3, r0
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	e009      	b.n	80018a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <_sbrk+0x64>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <_sbrk+0x64>)
 80018a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20005000 	.word	0x20005000
 80018b4:	00000400 	.word	0x00000400
 80018b8:	20000180 	.word	0x20000180
 80018bc:	20000198 	.word	0x20000198

080018c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	; (8001904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018f2:	f7ff ffe5 	bl	80018c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018f6:	f002 f9e1 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018fa:	f7ff fd51 	bl	80013a0 <main>
  bx lr
 80018fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001908:	080047f0 	.word	0x080047f0
  ldr r2, =_sbss
 800190c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001910:	20000198 	.word	0x20000198

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>
	...

08001918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_Init+0x28>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_Init+0x28>)
 8001922:	f043 0310 	orr.w	r3, r3, #16
 8001926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f92b 	bl	8001b84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f000 f808 	bl	8001944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fed6 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40022000 	.word	0x40022000

08001944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x54>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x58>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195a:	fbb3 f3f1 	udiv	r3, r3, r1
 800195e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f935 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e00e      	b.n	8001990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d80a      	bhi.n	800198e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f90b 	bl	8001b9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001984:	4a06      	ldr	r2, [pc, #24]	; (80019a0 <HAL_InitTick+0x5c>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000000 	.word	0x20000000
 800199c:	20000008 	.word	0x20000008
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_IncTick+0x1c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_IncTick+0x20>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_IncTick+0x20>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000184 	.word	0x20000184

080019c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <HAL_GetTick+0x10>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	20000184 	.word	0x20000184

080019dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e4:	f7ff fff0 	bl	80019c8 <HAL_GetTick>
 80019e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f4:	d005      	beq.n	8001a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_Delay+0x44>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a02:	bf00      	nop
 8001a04:	f7ff ffe0 	bl	80019c8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d8f7      	bhi.n	8001a04 <HAL_Delay+0x28>
  {
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b50:	d301      	bcc.n	8001b56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00f      	b.n	8001b76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <SysTick_Config+0x40>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5e:	210f      	movs	r1, #15
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f7ff ff90 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <SysTick_Config+0x40>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <SysTick_Config+0x40>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ff49 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bac:	f7ff ff5e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	6978      	ldr	r0, [r7, #20]
 8001bb8:	f7ff ff90 	bl	8001adc <NVIC_EncodePriority>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff5f 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb0 	bl	8001b40 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e169      	b.n	8001ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c00:	2201      	movs	r2, #1
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8158 	bne.w	8001ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a9a      	ldr	r2, [pc, #616]	; (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a98      	ldr	r2, [pc, #608]	; (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d875      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c2e:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d058      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c34:	4a96      	ldr	r2, [pc, #600]	; (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d86f      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c3a:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c40:	4a94      	ldr	r2, [pc, #592]	; (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d869      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c46:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04c      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a92      	ldr	r2, [pc, #584]	; (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d863      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c52:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d046      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c58:	4a90      	ldr	r2, [pc, #576]	; (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d85d      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_GPIO_Init+0xcc>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d859      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <HAL_GPIO_Init+0x80>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001cc1 	.word	0x08001cc1
 8001c74:	08001cd3 	.word	0x08001cd3
 8001c78:	08001d15 	.word	0x08001d15
 8001c7c:	08001d1b 	.word	0x08001d1b
 8001c80:	08001d1b 	.word	0x08001d1b
 8001c84:	08001d1b 	.word	0x08001d1b
 8001c88:	08001d1b 	.word	0x08001d1b
 8001c8c:	08001d1b 	.word	0x08001d1b
 8001c90:	08001d1b 	.word	0x08001d1b
 8001c94:	08001d1b 	.word	0x08001d1b
 8001c98:	08001d1b 	.word	0x08001d1b
 8001c9c:	08001d1b 	.word	0x08001d1b
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	08001d1b 	.word	0x08001d1b
 8001ca8:	08001d1b 	.word	0x08001d1b
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001cc9 	.word	0x08001cc9
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <HAL_GPIO_Init+0x2b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cbe:	e02c      	b.n	8001d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e029      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e024      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e01f      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e01a      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e013      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	611a      	str	r2, [r3, #16]
          break;
 8001d06:	e009      	b.n	8001d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	615a      	str	r2, [r3, #20]
          break;
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
          break;
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          break;
 8001d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	; 0xff
 8001d20:	d801      	bhi.n	8001d26 <HAL_GPIO_Init+0x13a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_Init+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	; 0xff
 8001d30:	d802      	bhi.n	8001d38 <HAL_GPIO_Init+0x14c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x152>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	3b08      	subs	r3, #8
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	210f      	movs	r1, #15
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b1 	beq.w	8001ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <HAL_GPIO_Init+0x2c0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_GPIO_Init+0x1ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	; (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3d      	ldr	r2, [pc, #244]	; (8001eb8 <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1e0>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dea:	492f      	ldr	r1, [pc, #188]	; (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	492c      	ldr	r1, [pc, #176]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e12:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4928      	ldr	r1, [pc, #160]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4922      	ldr	r1, [pc, #136]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	491e      	ldr	r1, [pc, #120]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	4918      	ldr	r1, [pc, #96]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4914      	ldr	r1, [pc, #80]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d021      	beq.n	8001ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
 8001e88:	e021      	b.n	8001ece <HAL_GPIO_Init+0x2e2>
 8001e8a:	bf00      	nop
 8001e8c:	10320000 	.word	0x10320000
 8001e90:	10310000 	.word	0x10310000
 8001e94:	10220000 	.word	0x10220000
 8001e98:	10210000 	.word	0x10210000
 8001e9c:	10120000 	.word	0x10120000
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001ec2:	68da      	ldr	r2, [r3, #12]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <HAL_GPIO_Init+0x304>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f47f ae8e 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	372c      	adds	r7, #44	; 0x2c
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	e001      	b.n	8001f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f32:	787b      	ldrb	r3, [r7, #1]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	041a      	lsls	r2, r3, #16
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	611a      	str	r2, [r3, #16]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
	...

08001f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e12b      	b.n	80021be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fbe4 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2224      	movs	r2, #36	; 0x24
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fb8:	f001 fb6e 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8001fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a81      	ldr	r2, [pc, #516]	; (80021c8 <HAL_I2C_Init+0x274>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d807      	bhi.n	8001fd8 <HAL_I2C_Init+0x84>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a80      	ldr	r2, [pc, #512]	; (80021cc <HAL_I2C_Init+0x278>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	bf94      	ite	ls
 8001fd0:	2301      	movls	r3, #1
 8001fd2:	2300      	movhi	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e006      	b.n	8001fe6 <HAL_I2C_Init+0x92>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a7d      	ldr	r2, [pc, #500]	; (80021d0 <HAL_I2C_Init+0x27c>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0e7      	b.n	80021be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a78      	ldr	r2, [pc, #480]	; (80021d4 <HAL_I2C_Init+0x280>)
 8001ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff6:	0c9b      	lsrs	r3, r3, #18
 8001ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <HAL_I2C_Init+0x274>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d802      	bhi.n	8002028 <HAL_I2C_Init+0xd4>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	e009      	b.n	800203c <HAL_I2C_Init+0xe8>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_I2C_Init+0x284>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	3301      	adds	r3, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800204e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	495c      	ldr	r1, [pc, #368]	; (80021c8 <HAL_I2C_Init+0x274>)
 8002058:	428b      	cmp	r3, r1
 800205a:	d819      	bhi.n	8002090 <HAL_I2C_Init+0x13c>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e59      	subs	r1, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fbb1 f3f3 	udiv	r3, r1, r3
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002070:	400b      	ands	r3, r1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_I2C_Init+0x138>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1e59      	subs	r1, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fbb1 f3f3 	udiv	r3, r1, r3
 8002084:	3301      	adds	r3, #1
 8002086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208a:	e051      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 800208c:	2304      	movs	r3, #4
 800208e:	e04f      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <HAL_I2C_Init+0x168>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	440b      	add	r3, r1
 80020a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e012      	b.n	80020e2 <HAL_I2C_Init+0x18e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	0099      	lsls	r1, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_I2C_Init+0x196>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e022      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10e      	bne.n	8002110 <HAL_I2C_Init+0x1bc>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1e58      	subs	r0, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	440b      	add	r3, r1
 8002100:	fbb0 f3f3 	udiv	r3, r0, r3
 8002104:	3301      	adds	r3, #1
 8002106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	e00f      	b.n	8002130 <HAL_I2C_Init+0x1dc>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1e58      	subs	r0, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	0099      	lsls	r1, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	fbb0 f3f3 	udiv	r3, r0, r3
 8002126:	3301      	adds	r3, #1
 8002128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	6809      	ldr	r1, [r1, #0]
 8002134:	4313      	orrs	r3, r2
 8002136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800215e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6911      	ldr	r1, [r2, #16]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68d2      	ldr	r2, [r2, #12]
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	000186a0 	.word	0x000186a0
 80021cc:	001e847f 	.word	0x001e847f
 80021d0:	003d08ff 	.word	0x003d08ff
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	10624dd3 	.word	0x10624dd3

080021dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	817b      	strh	r3, [r7, #10]
 80021ec:	4613      	mov	r3, r2
 80021ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f0:	f7ff fbea 	bl	80019c8 <HAL_GetTick>
 80021f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b20      	cmp	r3, #32
 8002200:	f040 80e0 	bne.w	80023c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2319      	movs	r3, #25
 800220a:	2201      	movs	r2, #1
 800220c:	4970      	ldr	r1, [pc, #448]	; (80023d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 fc92 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	e0d3      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2C_Master_Transmit+0x50>
 8002228:	2302      	movs	r3, #2
 800222a:	e0cc      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d007      	beq.n	8002252 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002260:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2221      	movs	r2, #33	; 0x21
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2210      	movs	r2, #16
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a50      	ldr	r2, [pc, #320]	; (80023d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 fafc 	bl	8002898 <I2C_MasterRequestWrite>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e08d      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c0:	e066      	b.n	8002390 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	6a39      	ldr	r1, [r7, #32]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fd0c 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00d      	beq.n	80022ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x188>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	6a39      	ldr	r1, [r7, #32]
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 fcfc 	bl	8002d66 <I2C_WaitOnBTFFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2b04      	cmp	r3, #4
 800237a:	d107      	bne.n	800238c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e01a      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d194      	bne.n	80022c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00100002 	.word	0x00100002
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	461a      	mov	r2, r3
 80023e4:	460b      	mov	r3, r1
 80023e6:	817b      	strh	r3, [r7, #10]
 80023e8:	4613      	mov	r3, r2
 80023ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff faea 	bl	80019c8 <HAL_GetTick>
 80023f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b20      	cmp	r3, #32
 8002400:	f040 823f 	bne.w	8002882 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2319      	movs	r3, #25
 800240a:	2201      	movs	r2, #1
 800240c:	497f      	ldr	r1, [pc, #508]	; (800260c <HAL_I2C_Master_Receive+0x234>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fb92 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800241a:	2302      	movs	r3, #2
 800241c:	e232      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_I2C_Master_Receive+0x54>
 8002428:	2302      	movs	r3, #2
 800242a:	e22b      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d007      	beq.n	8002452 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002460:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2222      	movs	r2, #34	; 0x22
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2210      	movs	r2, #16
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	893a      	ldrh	r2, [r7, #8]
 8002482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4a5f      	ldr	r2, [pc, #380]	; (8002610 <HAL_I2C_Master_Receive+0x238>)
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002494:	8979      	ldrh	r1, [r7, #10]
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fa7e 	bl	800299c <I2C_MasterRequestRead>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1ec      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d113      	bne.n	80024da <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e1c0      	b.n	800285c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d11e      	bne.n	8002520 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024f2:	b672      	cpsid	i
}
 80024f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800251c:	b662      	cpsie	i
}
 800251e:	e035      	b.n	800258c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002524:	2b02      	cmp	r3, #2
 8002526:	d11e      	bne.n	8002566 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002536:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002538:	b672      	cpsid	i
}
 800253a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002562:	b662      	cpsie	i
}
 8002564:	e012      	b.n	800258c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800258c:	e166      	b.n	800285c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002592:	2b03      	cmp	r3, #3
 8002594:	f200 811f 	bhi.w	80027d6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	2b01      	cmp	r3, #1
 800259e:	d123      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fc1f 	bl	8002de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e167      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e6:	e139      	b.n	800285c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d152      	bne.n	8002696 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	2200      	movs	r2, #0
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <HAL_I2C_Master_Receive+0x23c>)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa9c 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e13c      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
 800260a:	bf00      	nop
 800260c:	00100002 	.word	0x00100002
 8002610:	ffff0000 	.word	0xffff0000
 8002614:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002618:	b672      	cpsid	i
}
 800261a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800265e:	b662      	cpsie	i
}
 8002660:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002694:	e0e2      	b.n	800285c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269c:	2200      	movs	r2, #0
 800269e:	497b      	ldr	r1, [pc, #492]	; (800288c <HAL_I2C_Master_Receive+0x4b4>)
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fa49 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0e9      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026f6:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_I2C_Master_Receive+0x4b8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	08db      	lsrs	r3, r3, #3
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_I2C_Master_Receive+0x4bc>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a1a      	lsrs	r2, r3, #8
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00da      	lsls	r2, r3, #3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	3b01      	subs	r3, #1
 8002714:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d118      	bne.n	800274e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f043 0220 	orr.w	r2, r3, #32
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800273e:	b662      	cpsie	i
}
 8002740:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e09a      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b04      	cmp	r3, #4
 800275a:	d1d9      	bne.n	8002710 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800279e:	b662      	cpsie	i
}
 80027a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027d4:	e042      	b.n	800285c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fb04 	bl	8002de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e04c      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d118      	bne.n	800285c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	2b00      	cmp	r3, #0
 8002862:	f47f ae94 	bne.w	800258e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e000      	b.n	8002884 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002882:	2302      	movs	r3, #2
  }
}
 8002884:	4618      	mov	r0, r3
 8002886:	3728      	adds	r7, #40	; 0x28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	00010004 	.word	0x00010004
 8002890:	20000000 	.word	0x20000000
 8002894:	14f8b589 	.word	0x14f8b589

08002898 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d006      	beq.n	80028c2 <I2C_MasterRequestWrite+0x2a>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d003      	beq.n	80028c2 <I2C_MasterRequestWrite+0x2a>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c0:	d108      	bne.n	80028d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e00b      	b.n	80028ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	2b12      	cmp	r3, #18
 80028da:	d107      	bne.n	80028ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f91d 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002912:	d103      	bne.n	800291c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e035      	b.n	800298c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002928:	d108      	bne.n	800293c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	e01b      	b.n	8002974 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800293c:	897b      	ldrh	r3, [r7, #10]
 800293e:	11db      	asrs	r3, r3, #7
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0306 	and.w	r3, r3, #6
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f063 030f 	orn	r3, r3, #15
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	490e      	ldr	r1, [pc, #56]	; (8002994 <I2C_MasterRequestWrite+0xfc>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f943 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e010      	b.n	800298c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <I2C_MasterRequestWrite+0x100>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f933 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	00010008 	.word	0x00010008
 8002998:	00010002 	.word	0x00010002

0800299c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	460b      	mov	r3, r1
 80029aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d006      	beq.n	80029d6 <I2C_MasterRequestRead+0x3a>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d003      	beq.n	80029d6 <I2C_MasterRequestRead+0x3a>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d4:	d108      	bne.n	80029e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e00b      	b.n	8002a00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b11      	cmp	r3, #17
 80029ee:	d107      	bne.n	8002a00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f893 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a26:	d103      	bne.n	8002a30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e079      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3c:	d108      	bne.n	8002a50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	e05f      	b.n	8002b10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a50:	897b      	ldrh	r3, [r7, #10]
 8002a52:	11db      	asrs	r3, r3, #7
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f003 0306 	and.w	r3, r3, #6
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f063 030f 	orn	r3, r3, #15
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4930      	ldr	r1, [pc, #192]	; (8002b30 <I2C_MasterRequestRead+0x194>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f8b9 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e054      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4929      	ldr	r1, [pc, #164]	; (8002b34 <I2C_MasterRequestRead+0x198>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8a9 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e044      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f831 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e017      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	11db      	asrs	r3, r3, #7
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0306 	and.w	r3, r3, #6
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f063 030e 	orn	r3, r3, #14
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <I2C_MasterRequestRead+0x198>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f865 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	00010008 	.word	0x00010008
 8002b34:	00010002 	.word	0x00010002

08002b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b48:	e025      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d021      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fe ff39 	bl	80019c8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e023      	b.n	8002bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10d      	bne.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	e00c      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d0b6      	beq.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf4:	e051      	b.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c04:	d123      	bne.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e046      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d021      	beq.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fe feb7 	bl	80019c8 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d116      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e020      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e00b      	b.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d18d      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf0:	e02d      	b.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f8ce 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e02d      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d021      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fe5d 	bl	80019c8 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d1ca      	bne.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d72:	e02d      	b.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f88d 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02d      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d021      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fe fe1c 	bl	80019c8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d1ca      	bne.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df4:	e042      	b.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d119      	bne.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e029      	b.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fe fdc6 	bl	80019c8 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d1b5      	bne.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d11b      	bne.n	8002ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e272      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 8087 	beq.w	800301e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f10:	4b92      	ldr	r3, [pc, #584]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d00c      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f1c:	4b8f      	ldr	r3, [pc, #572]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d112      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
 8002f28:	4b8c      	ldr	r3, [pc, #560]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f36:	4b89      	ldr	r3, [pc, #548]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06c      	beq.n	800301c <HAL_RCC_OscConfig+0x12c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d168      	bne.n	800301c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e24c      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x76>
 8002f58:	4b80      	ldr	r3, [pc, #512]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a7f      	ldr	r2, [pc, #508]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e02e      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x98>
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7a      	ldr	r2, [pc, #488]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	4b78      	ldr	r3, [pc, #480]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a77      	ldr	r2, [pc, #476]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	e01d      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0xbc>
 8002f92:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a71      	ldr	r2, [pc, #452]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a6e      	ldr	r2, [pc, #440]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e00b      	b.n	8002fc4 <HAL_RCC_OscConfig+0xd4>
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fcfc 	bl	80019c8 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe fcf8 	bl	80019c8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e200      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xe4>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fce8 	bl	80019c8 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fce4 	bl	80019c8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1ec      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x10c>
 800301a:	e000      	b.n	800301e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d063      	beq.n	80030f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1c0      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3d      	ldr	r3, [pc, #244]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4939      	ldr	r1, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308a:	f7fe fc9d 	bl	80019c8 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fc99 	bl	80019c8 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1a1      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2d      	ldr	r3, [pc, #180]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4927      	ldr	r1, [pc, #156]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <HAL_RCC_OscConfig+0x270>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe fc7c 	bl	80019c8 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fc78 	bl	80019c8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e180      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d03a      	beq.n	8003174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d019      	beq.n	800313a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310c:	f7fe fc5c 	bl	80019c8 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe fc58 	bl	80019c8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e160      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_OscConfig+0x26c>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003132:	2001      	movs	r0, #1
 8003134:	f000 fac4 	bl	80036c0 <RCC_Delay>
 8003138:	e01c      	b.n	8003174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCC_OscConfig+0x274>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003140:	f7fe fc42 	bl	80019c8 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003148:	f7fe fc3e 	bl	80019c8 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d908      	bls.n	8003168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e146      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	42420000 	.word	0x42420000
 8003164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	4b92      	ldr	r3, [pc, #584]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e9      	bne.n	8003148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a6 	beq.w	80032ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003186:	4b8b      	ldr	r3, [pc, #556]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a87      	ldr	r2, [pc, #540]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a7e      	ldr	r2, [pc, #504]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fbff 	bl	80019c8 <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe fbfb 	bl	80019c8 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b64      	cmp	r3, #100	; 0x64
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e103      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x4c8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x312>
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e02d      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x334>
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4b67      	ldr	r3, [pc, #412]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a66      	ldr	r2, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	e01c      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d10c      	bne.n	8003246 <HAL_RCC_OscConfig+0x356>
 800322c:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	e00b      	b.n	800325e <HAL_RCC_OscConfig+0x36e>
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a5a      	ldr	r2, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d015      	beq.n	8003292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe fbaf 	bl	80019c8 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe fbab 	bl	80019c8 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0b1      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCC_OscConfig+0x37e>
 8003290:	e014      	b.n	80032bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003292:	f7fe fb99 	bl	80019c8 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fb95 	bl	80019c8 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e09b      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b0:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1ee      	bne.n	800329a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8087 	beq.w	80033e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d061      	beq.n	80033a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d146      	bne.n	800337a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCC_OscConfig+0x4cc>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fb69 	bl	80019c8 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fb65 	bl	80019c8 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e06d      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330c:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d108      	bne.n	8003334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	4921      	ldr	r1, [pc, #132]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003334:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a19      	ldr	r1, [r3, #32]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	430b      	orrs	r3, r1
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4cc>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe fb39 	bl	80019c8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe fb35 	bl	80019c8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e03d      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336c:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x46a>
 8003378:	e035      	b.n	80033e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_RCC_OscConfig+0x4cc>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fb22 	bl	80019c8 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe fb1e 	bl	80019c8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e026      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x498>
 80033a6:	e01e      	b.n	80033e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e019      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40007000 	.word	0x40007000
 80033bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_OscConfig+0x500>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d106      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d0      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d910      	bls.n	8003438 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b67      	ldr	r3, [pc, #412]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 0207 	bic.w	r2, r3, #7
 800341e:	4965      	ldr	r1, [pc, #404]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0b8      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a58      	ldr	r2, [pc, #352]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800345a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003468:	4b53      	ldr	r3, [pc, #332]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a52      	ldr	r2, [pc, #328]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003472:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	494d      	ldr	r1, [pc, #308]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d040      	beq.n	8003514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d115      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07f      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d107      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e073      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c2:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e06b      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d2:	4b39      	ldr	r3, [pc, #228]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f023 0203 	bic.w	r2, r3, #3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	4936      	ldr	r1, [pc, #216]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e4:	f7fe fa70 	bl	80019c8 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fe fa6c 	bl	80019c8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e053      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 020c 	and.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	429a      	cmp	r2, r3
 8003512:	d1eb      	bne.n	80034ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d210      	bcs.n	8003544 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4922      	ldr	r1, [pc, #136]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d001      	beq.n	8003544 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e032      	b.n	80035aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003550:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4916      	ldr	r1, [pc, #88]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	4313      	orrs	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800356e:	4b12      	ldr	r3, [pc, #72]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	490e      	ldr	r1, [pc, #56]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003582:	f000 f821 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003586:	4602      	mov	r2, r0
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	091b      	lsrs	r3, r3, #4
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	490a      	ldr	r1, [pc, #40]	; (80035bc <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	5ccb      	ldrb	r3, [r1, r3]
 8003596:	fa22 f303 	lsr.w	r3, r2, r3
 800359a:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1cc>)
 800359c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_ClockConfig+0x1d0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe f9ce 	bl	8001944 <HAL_InitTick>

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40022000 	.word	0x40022000
 80035b8:	40021000 	.word	0x40021000
 80035bc:	0800479c 	.word	0x0800479c
 80035c0:	20000000 	.word	0x20000000
 80035c4:	20000004 	.word	0x20000004

080035c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b490      	push	{r4, r7}
 80035ca:	b08a      	sub	sp, #40	; 0x28
 80035cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <HAL_RCC_GetSysClockFreq+0xac>)
 80035d0:	1d3c      	adds	r4, r7, #4
 80035d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035d8:	f240 2301 	movw	r3, #513	; 0x201
 80035dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x40>
 8003602:	2b08      	cmp	r3, #8
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x46>
 8003606:	e02b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCC_GetSysClockFreq+0xb4>)
 800360a:	623b      	str	r3, [r7, #32]
      break;
 800360c:	e02b      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	0c9b      	lsrs	r3, r3, #18
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3328      	adds	r3, #40	; 0x28
 8003618:	443b      	add	r3, r7
 800361a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800361e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d012      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb0>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	0c5b      	lsrs	r3, r3, #17
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	3328      	adds	r3, #40	; 0x28
 8003636:	443b      	add	r3, r7
 8003638:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800363c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	4a0e      	ldr	r2, [pc, #56]	; (800367c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003642:	fb03 f202 	mul.w	r2, r3, r2
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e004      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	623b      	str	r3, [r7, #32]
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003662:	623b      	str	r3, [r7, #32]
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6a3b      	ldr	r3, [r7, #32]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc90      	pop	{r4, r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	0800478c 	.word	0x0800478c
 8003678:	40021000 	.word	0x40021000
 800367c:	007a1200 	.word	0x007a1200
 8003680:	003d0900 	.word	0x003d0900

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b02      	ldr	r3, [pc, #8]	; (8003694 <HAL_RCC_GetHCLKFreq+0x10>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000000 	.word	0x20000000

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff2 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	080047ac 	.word	0x080047ac

080036c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <RCC_Delay+0x34>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <RCC_Delay+0x38>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0a5b      	lsrs	r3, r3, #9
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036dc:	bf00      	nop
  }
  while (Delay --);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1e5a      	subs	r2, r3, #1
 80036e2:	60fa      	str	r2, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f9      	bne.n	80036dc <RCC_Delay+0x1c>
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bc80      	pop	{r7}
 80036f2:	4770      	bx	lr
 80036f4:	20000000 	.word	0x20000000
 80036f8:	10624dd3 	.word	0x10624dd3

080036fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe f850 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 f962 	bl	8003a04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e032      	b.n	800381a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_TIM_Base_Start+0x88>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_TIM_Base_Start+0x48>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ce:	d009      	beq.n	80037e4 <HAL_TIM_Base_Start+0x48>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a14      	ldr	r2, [pc, #80]	; (8003828 <HAL_TIM_Base_Start+0x8c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_TIM_Base_Start+0x48>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_TIM_Base_Start+0x90>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d010      	beq.n	8003818 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003806:	e007      	b.n	8003818 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800

08003830 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6a1a      	ldr	r2, [r3, #32]
 800383e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003842:	4013      	ands	r3, r2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10f      	bne.n	8003868 <HAL_TIM_Base_Stop+0x38>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	f240 4344 	movw	r3, #1092	; 0x444
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_TIM_Base_Stop+0x38>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_TIM_ConfigClockSource+0x18>
 8003890:	2302      	movs	r3, #2
 8003892:	e0b3      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x180>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038cc:	d03e      	beq.n	800394c <HAL_TIM_ConfigClockSource+0xd0>
 80038ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d2:	f200 8087 	bhi.w	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	f000 8085 	beq.w	80039e8 <HAL_TIM_ConfigClockSource+0x16c>
 80038de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e2:	d87f      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 80038e4:	2b70      	cmp	r3, #112	; 0x70
 80038e6:	d01a      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xa2>
 80038e8:	2b70      	cmp	r3, #112	; 0x70
 80038ea:	d87b      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 80038ec:	2b60      	cmp	r3, #96	; 0x60
 80038ee:	d050      	beq.n	8003992 <HAL_TIM_ConfigClockSource+0x116>
 80038f0:	2b60      	cmp	r3, #96	; 0x60
 80038f2:	d877      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 80038f4:	2b50      	cmp	r3, #80	; 0x50
 80038f6:	d03c      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0xf6>
 80038f8:	2b50      	cmp	r3, #80	; 0x50
 80038fa:	d873      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d058      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x136>
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d86f      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 8003904:	2b30      	cmp	r3, #48	; 0x30
 8003906:	d064      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x156>
 8003908:	2b30      	cmp	r3, #48	; 0x30
 800390a:	d86b      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 800390c:	2b20      	cmp	r3, #32
 800390e:	d060      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x156>
 8003910:	2b20      	cmp	r3, #32
 8003912:	d867      	bhi.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05c      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x156>
 8003918:	2b10      	cmp	r3, #16
 800391a:	d05a      	beq.n	80039d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800391c:	e062      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f000 f942 	bl	8003bb6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003940:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
      break;
 800394a:	e04e      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	6899      	ldr	r1, [r3, #8]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f000 f92b 	bl	8003bb6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396e:	609a      	str	r2, [r3, #8]
      break;
 8003970:	e03b      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6859      	ldr	r1, [r3, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	461a      	mov	r2, r3
 8003980:	f000 f8a2 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2150      	movs	r1, #80	; 0x50
 800398a:	4618      	mov	r0, r3
 800398c:	f000 f8f9 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 8003990:	e02b      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	461a      	mov	r2, r3
 80039a0:	f000 f8c0 	bl	8003b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2160      	movs	r1, #96	; 0x60
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f8e9 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80039b0:	e01b      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	461a      	mov	r2, r3
 80039c0:	f000 f882 	bl	8003ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f8d9 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80039d0:	e00b      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f000 f8d0 	bl	8003b82 <TIM_ITRx_SetConfig>
        break;
 80039e2:	e002      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80039e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_Base_SetConfig+0xb8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x30>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x30>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <TIM_Base_SetConfig+0xbc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x30>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <TIM_Base_SetConfig+0xc0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <TIM_Base_SetConfig+0xb8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x62>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a19      	ldr	r2, [pc, #100]	; (8003ac0 <TIM_Base_SetConfig+0xbc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x62>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <TIM_Base_SetConfig+0xc0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <TIM_Base_SetConfig+0xb8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d103      	bne.n	8003aac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	615a      	str	r2, [r3, #20]
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800

08003ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f023 0201 	bic.w	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f023 030a 	bic.w	r3, r3, #10
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f023 0210 	bic.w	r2, r3, #16
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	031b      	lsls	r3, r3, #12
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b087      	sub	sp, #28
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	021a      	lsls	r2, r3, #8
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e046      	b.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d009      	beq.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a10      	ldr	r2, [pc, #64]	; (8003cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10c      	bne.n	8003c88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800

08003cb0 <__errno>:
 8003cb0:	4b01      	ldr	r3, [pc, #4]	; (8003cb8 <__errno+0x8>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	2000000c 	.word	0x2000000c

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	2600      	movs	r6, #0
 8003cc0:	4d0c      	ldr	r5, [pc, #48]	; (8003cf4 <__libc_init_array+0x38>)
 8003cc2:	4c0d      	ldr	r4, [pc, #52]	; (8003cf8 <__libc_init_array+0x3c>)
 8003cc4:	1b64      	subs	r4, r4, r5
 8003cc6:	10a4      	asrs	r4, r4, #2
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	f000 fc9c 	bl	8004608 <_init>
 8003cd0:	2600      	movs	r6, #0
 8003cd2:	4d0a      	ldr	r5, [pc, #40]	; (8003cfc <__libc_init_array+0x40>)
 8003cd4:	4c0a      	ldr	r4, [pc, #40]	; (8003d00 <__libc_init_array+0x44>)
 8003cd6:	1b64      	subs	r4, r4, r5
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	080047e8 	.word	0x080047e8
 8003cf8:	080047e8 	.word	0x080047e8
 8003cfc:	080047e8 	.word	0x080047e8
 8003d00:	080047ec 	.word	0x080047ec

08003d04 <memset>:
 8003d04:	4603      	mov	r3, r0
 8003d06:	4402      	add	r2, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_vsiprintf_r>:
 8003d14:	b500      	push	{lr}
 8003d16:	b09b      	sub	sp, #108	; 0x6c
 8003d18:	9100      	str	r1, [sp, #0]
 8003d1a:	9104      	str	r1, [sp, #16]
 8003d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d20:	9105      	str	r1, [sp, #20]
 8003d22:	9102      	str	r1, [sp, #8]
 8003d24:	4905      	ldr	r1, [pc, #20]	; (8003d3c <_vsiprintf_r+0x28>)
 8003d26:	9103      	str	r1, [sp, #12]
 8003d28:	4669      	mov	r1, sp
 8003d2a:	f000 f86f 	bl	8003e0c <_svfiprintf_r>
 8003d2e:	2200      	movs	r2, #0
 8003d30:	9b00      	ldr	r3, [sp, #0]
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	b01b      	add	sp, #108	; 0x6c
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	bf00      	nop
 8003d3c:	ffff0208 	.word	0xffff0208

08003d40 <vsiprintf>:
 8003d40:	4613      	mov	r3, r2
 8003d42:	460a      	mov	r2, r1
 8003d44:	4601      	mov	r1, r0
 8003d46:	4802      	ldr	r0, [pc, #8]	; (8003d50 <vsiprintf+0x10>)
 8003d48:	6800      	ldr	r0, [r0, #0]
 8003d4a:	f7ff bfe3 	b.w	8003d14 <_vsiprintf_r>
 8003d4e:	bf00      	nop
 8003d50:	2000000c 	.word	0x2000000c

08003d54 <__ssputs_r>:
 8003d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d58:	688e      	ldr	r6, [r1, #8]
 8003d5a:	4682      	mov	sl, r0
 8003d5c:	429e      	cmp	r6, r3
 8003d5e:	460c      	mov	r4, r1
 8003d60:	4690      	mov	r8, r2
 8003d62:	461f      	mov	r7, r3
 8003d64:	d838      	bhi.n	8003dd8 <__ssputs_r+0x84>
 8003d66:	898a      	ldrh	r2, [r1, #12]
 8003d68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d6c:	d032      	beq.n	8003dd4 <__ssputs_r+0x80>
 8003d6e:	6825      	ldr	r5, [r4, #0]
 8003d70:	6909      	ldr	r1, [r1, #16]
 8003d72:	3301      	adds	r3, #1
 8003d74:	eba5 0901 	sub.w	r9, r5, r1
 8003d78:	6965      	ldr	r5, [r4, #20]
 8003d7a:	444b      	add	r3, r9
 8003d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d84:	106d      	asrs	r5, r5, #1
 8003d86:	429d      	cmp	r5, r3
 8003d88:	bf38      	it	cc
 8003d8a:	461d      	movcc	r5, r3
 8003d8c:	0553      	lsls	r3, r2, #21
 8003d8e:	d531      	bpl.n	8003df4 <__ssputs_r+0xa0>
 8003d90:	4629      	mov	r1, r5
 8003d92:	f000 fb6f 	bl	8004474 <_malloc_r>
 8003d96:	4606      	mov	r6, r0
 8003d98:	b950      	cbnz	r0, 8003db0 <__ssputs_r+0x5c>
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f8ca 3000 	str.w	r3, [sl]
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003daa:	81a3      	strh	r3, [r4, #12]
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db0:	464a      	mov	r2, r9
 8003db2:	6921      	ldr	r1, [r4, #16]
 8003db4:	f000 face 	bl	8004354 <memcpy>
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	6126      	str	r6, [r4, #16]
 8003dc6:	444e      	add	r6, r9
 8003dc8:	6026      	str	r6, [r4, #0]
 8003dca:	463e      	mov	r6, r7
 8003dcc:	6165      	str	r5, [r4, #20]
 8003dce:	eba5 0509 	sub.w	r5, r5, r9
 8003dd2:	60a5      	str	r5, [r4, #8]
 8003dd4:	42be      	cmp	r6, r7
 8003dd6:	d900      	bls.n	8003dda <__ssputs_r+0x86>
 8003dd8:	463e      	mov	r6, r7
 8003dda:	4632      	mov	r2, r6
 8003ddc:	4641      	mov	r1, r8
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	f000 fac6 	bl	8004370 <memmove>
 8003de4:	68a3      	ldr	r3, [r4, #8]
 8003de6:	2000      	movs	r0, #0
 8003de8:	1b9b      	subs	r3, r3, r6
 8003dea:	60a3      	str	r3, [r4, #8]
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	4433      	add	r3, r6
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	e7db      	b.n	8003dac <__ssputs_r+0x58>
 8003df4:	462a      	mov	r2, r5
 8003df6:	f000 fbb1 	bl	800455c <_realloc_r>
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d1e1      	bne.n	8003dc4 <__ssputs_r+0x70>
 8003e00:	4650      	mov	r0, sl
 8003e02:	6921      	ldr	r1, [r4, #16]
 8003e04:	f000 face 	bl	80043a4 <_free_r>
 8003e08:	e7c7      	b.n	8003d9a <__ssputs_r+0x46>
	...

08003e0c <_svfiprintf_r>:
 8003e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e10:	4698      	mov	r8, r3
 8003e12:	898b      	ldrh	r3, [r1, #12]
 8003e14:	4607      	mov	r7, r0
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	b09d      	sub	sp, #116	; 0x74
 8003e1e:	d50e      	bpl.n	8003e3e <_svfiprintf_r+0x32>
 8003e20:	690b      	ldr	r3, [r1, #16]
 8003e22:	b963      	cbnz	r3, 8003e3e <_svfiprintf_r+0x32>
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	f000 fb25 	bl	8004474 <_malloc_r>
 8003e2a:	6028      	str	r0, [r5, #0]
 8003e2c:	6128      	str	r0, [r5, #16]
 8003e2e:	b920      	cbnz	r0, 8003e3a <_svfiprintf_r+0x2e>
 8003e30:	230c      	movs	r3, #12
 8003e32:	603b      	str	r3, [r7, #0]
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	e0d1      	b.n	8003fde <_svfiprintf_r+0x1d2>
 8003e3a:	2340      	movs	r3, #64	; 0x40
 8003e3c:	616b      	str	r3, [r5, #20]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9309      	str	r3, [sp, #36]	; 0x24
 8003e42:	2320      	movs	r3, #32
 8003e44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e48:	2330      	movs	r3, #48	; 0x30
 8003e4a:	f04f 0901 	mov.w	r9, #1
 8003e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ff8 <_svfiprintf_r+0x1ec>
 8003e56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e5a:	4623      	mov	r3, r4
 8003e5c:	469a      	mov	sl, r3
 8003e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e62:	b10a      	cbz	r2, 8003e68 <_svfiprintf_r+0x5c>
 8003e64:	2a25      	cmp	r2, #37	; 0x25
 8003e66:	d1f9      	bne.n	8003e5c <_svfiprintf_r+0x50>
 8003e68:	ebba 0b04 	subs.w	fp, sl, r4
 8003e6c:	d00b      	beq.n	8003e86 <_svfiprintf_r+0x7a>
 8003e6e:	465b      	mov	r3, fp
 8003e70:	4622      	mov	r2, r4
 8003e72:	4629      	mov	r1, r5
 8003e74:	4638      	mov	r0, r7
 8003e76:	f7ff ff6d 	bl	8003d54 <__ssputs_r>
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	f000 80aa 	beq.w	8003fd4 <_svfiprintf_r+0x1c8>
 8003e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e82:	445a      	add	r2, fp
 8003e84:	9209      	str	r2, [sp, #36]	; 0x24
 8003e86:	f89a 3000 	ldrb.w	r3, [sl]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80a2 	beq.w	8003fd4 <_svfiprintf_r+0x1c8>
 8003e90:	2300      	movs	r3, #0
 8003e92:	f04f 32ff 	mov.w	r2, #4294967295
 8003e96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e9a:	f10a 0a01 	add.w	sl, sl, #1
 8003e9e:	9304      	str	r3, [sp, #16]
 8003ea0:	9307      	str	r3, [sp, #28]
 8003ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ea6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea8:	4654      	mov	r4, sl
 8003eaa:	2205      	movs	r2, #5
 8003eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb0:	4851      	ldr	r0, [pc, #324]	; (8003ff8 <_svfiprintf_r+0x1ec>)
 8003eb2:	f000 fa41 	bl	8004338 <memchr>
 8003eb6:	9a04      	ldr	r2, [sp, #16]
 8003eb8:	b9d8      	cbnz	r0, 8003ef2 <_svfiprintf_r+0xe6>
 8003eba:	06d0      	lsls	r0, r2, #27
 8003ebc:	bf44      	itt	mi
 8003ebe:	2320      	movmi	r3, #32
 8003ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ec4:	0711      	lsls	r1, r2, #28
 8003ec6:	bf44      	itt	mi
 8003ec8:	232b      	movmi	r3, #43	; 0x2b
 8003eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ece:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ed4:	d015      	beq.n	8003f02 <_svfiprintf_r+0xf6>
 8003ed6:	4654      	mov	r4, sl
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f04f 0c0a 	mov.w	ip, #10
 8003ede:	9a07      	ldr	r2, [sp, #28]
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ee6:	3b30      	subs	r3, #48	; 0x30
 8003ee8:	2b09      	cmp	r3, #9
 8003eea:	d94e      	bls.n	8003f8a <_svfiprintf_r+0x17e>
 8003eec:	b1b0      	cbz	r0, 8003f1c <_svfiprintf_r+0x110>
 8003eee:	9207      	str	r2, [sp, #28]
 8003ef0:	e014      	b.n	8003f1c <_svfiprintf_r+0x110>
 8003ef2:	eba0 0308 	sub.w	r3, r0, r8
 8003ef6:	fa09 f303 	lsl.w	r3, r9, r3
 8003efa:	4313      	orrs	r3, r2
 8003efc:	46a2      	mov	sl, r4
 8003efe:	9304      	str	r3, [sp, #16]
 8003f00:	e7d2      	b.n	8003ea8 <_svfiprintf_r+0x9c>
 8003f02:	9b03      	ldr	r3, [sp, #12]
 8003f04:	1d19      	adds	r1, r3, #4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	9103      	str	r1, [sp, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bfbb      	ittet	lt
 8003f0e:	425b      	neglt	r3, r3
 8003f10:	f042 0202 	orrlt.w	r2, r2, #2
 8003f14:	9307      	strge	r3, [sp, #28]
 8003f16:	9307      	strlt	r3, [sp, #28]
 8003f18:	bfb8      	it	lt
 8003f1a:	9204      	strlt	r2, [sp, #16]
 8003f1c:	7823      	ldrb	r3, [r4, #0]
 8003f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f20:	d10c      	bne.n	8003f3c <_svfiprintf_r+0x130>
 8003f22:	7863      	ldrb	r3, [r4, #1]
 8003f24:	2b2a      	cmp	r3, #42	; 0x2a
 8003f26:	d135      	bne.n	8003f94 <_svfiprintf_r+0x188>
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	3402      	adds	r4, #2
 8003f2c:	1d1a      	adds	r2, r3, #4
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	9203      	str	r2, [sp, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	bfb8      	it	lt
 8003f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f3a:	9305      	str	r3, [sp, #20]
 8003f3c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003ffc <_svfiprintf_r+0x1f0>
 8003f40:	2203      	movs	r2, #3
 8003f42:	4650      	mov	r0, sl
 8003f44:	7821      	ldrb	r1, [r4, #0]
 8003f46:	f000 f9f7 	bl	8004338 <memchr>
 8003f4a:	b140      	cbz	r0, 8003f5e <_svfiprintf_r+0x152>
 8003f4c:	2340      	movs	r3, #64	; 0x40
 8003f4e:	eba0 000a 	sub.w	r0, r0, sl
 8003f52:	fa03 f000 	lsl.w	r0, r3, r0
 8003f56:	9b04      	ldr	r3, [sp, #16]
 8003f58:	3401      	adds	r4, #1
 8003f5a:	4303      	orrs	r3, r0
 8003f5c:	9304      	str	r3, [sp, #16]
 8003f5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f62:	2206      	movs	r2, #6
 8003f64:	4826      	ldr	r0, [pc, #152]	; (8004000 <_svfiprintf_r+0x1f4>)
 8003f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f6a:	f000 f9e5 	bl	8004338 <memchr>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d038      	beq.n	8003fe4 <_svfiprintf_r+0x1d8>
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <_svfiprintf_r+0x1f8>)
 8003f74:	bb1b      	cbnz	r3, 8003fbe <_svfiprintf_r+0x1b2>
 8003f76:	9b03      	ldr	r3, [sp, #12]
 8003f78:	3307      	adds	r3, #7
 8003f7a:	f023 0307 	bic.w	r3, r3, #7
 8003f7e:	3308      	adds	r3, #8
 8003f80:	9303      	str	r3, [sp, #12]
 8003f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f84:	4433      	add	r3, r6
 8003f86:	9309      	str	r3, [sp, #36]	; 0x24
 8003f88:	e767      	b.n	8003e5a <_svfiprintf_r+0x4e>
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	2001      	movs	r0, #1
 8003f8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f92:	e7a5      	b.n	8003ee0 <_svfiprintf_r+0xd4>
 8003f94:	2300      	movs	r3, #0
 8003f96:	f04f 0c0a 	mov.w	ip, #10
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	3401      	adds	r4, #1
 8003f9e:	9305      	str	r3, [sp, #20]
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fa6:	3a30      	subs	r2, #48	; 0x30
 8003fa8:	2a09      	cmp	r2, #9
 8003faa:	d903      	bls.n	8003fb4 <_svfiprintf_r+0x1a8>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0c5      	beq.n	8003f3c <_svfiprintf_r+0x130>
 8003fb0:	9105      	str	r1, [sp, #20]
 8003fb2:	e7c3      	b.n	8003f3c <_svfiprintf_r+0x130>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fbc:	e7f0      	b.n	8003fa0 <_svfiprintf_r+0x194>
 8003fbe:	ab03      	add	r3, sp, #12
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <_svfiprintf_r+0x1fc>)
 8003fc8:	a904      	add	r1, sp, #16
 8003fca:	f3af 8000 	nop.w
 8003fce:	1c42      	adds	r2, r0, #1
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	d1d6      	bne.n	8003f82 <_svfiprintf_r+0x176>
 8003fd4:	89ab      	ldrh	r3, [r5, #12]
 8003fd6:	065b      	lsls	r3, r3, #25
 8003fd8:	f53f af2c 	bmi.w	8003e34 <_svfiprintf_r+0x28>
 8003fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fde:	b01d      	add	sp, #116	; 0x74
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	ab03      	add	r3, sp, #12
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	462a      	mov	r2, r5
 8003fea:	4638      	mov	r0, r7
 8003fec:	4b06      	ldr	r3, [pc, #24]	; (8004008 <_svfiprintf_r+0x1fc>)
 8003fee:	a904      	add	r1, sp, #16
 8003ff0:	f000 f87c 	bl	80040ec <_printf_i>
 8003ff4:	e7eb      	b.n	8003fce <_svfiprintf_r+0x1c2>
 8003ff6:	bf00      	nop
 8003ff8:	080047b4 	.word	0x080047b4
 8003ffc:	080047ba 	.word	0x080047ba
 8004000:	080047be 	.word	0x080047be
 8004004:	00000000 	.word	0x00000000
 8004008:	08003d55 	.word	0x08003d55

0800400c <_printf_common>:
 800400c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	4616      	mov	r6, r2
 8004012:	4699      	mov	r9, r3
 8004014:	688a      	ldr	r2, [r1, #8]
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	4607      	mov	r7, r0
 800401a:	4293      	cmp	r3, r2
 800401c:	bfb8      	it	lt
 800401e:	4613      	movlt	r3, r2
 8004020:	6033      	str	r3, [r6, #0]
 8004022:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004026:	460c      	mov	r4, r1
 8004028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800402c:	b10a      	cbz	r2, 8004032 <_printf_common+0x26>
 800402e:	3301      	adds	r3, #1
 8004030:	6033      	str	r3, [r6, #0]
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	0699      	lsls	r1, r3, #26
 8004036:	bf42      	ittt	mi
 8004038:	6833      	ldrmi	r3, [r6, #0]
 800403a:	3302      	addmi	r3, #2
 800403c:	6033      	strmi	r3, [r6, #0]
 800403e:	6825      	ldr	r5, [r4, #0]
 8004040:	f015 0506 	ands.w	r5, r5, #6
 8004044:	d106      	bne.n	8004054 <_printf_common+0x48>
 8004046:	f104 0a19 	add.w	sl, r4, #25
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	6832      	ldr	r2, [r6, #0]
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	42ab      	cmp	r3, r5
 8004052:	dc28      	bgt.n	80040a6 <_printf_common+0x9a>
 8004054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004058:	1e13      	subs	r3, r2, #0
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	bf18      	it	ne
 800405e:	2301      	movne	r3, #1
 8004060:	0692      	lsls	r2, r2, #26
 8004062:	d42d      	bmi.n	80040c0 <_printf_common+0xb4>
 8004064:	4649      	mov	r1, r9
 8004066:	4638      	mov	r0, r7
 8004068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800406c:	47c0      	blx	r8
 800406e:	3001      	adds	r0, #1
 8004070:	d020      	beq.n	80040b4 <_printf_common+0xa8>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	68e5      	ldr	r5, [r4, #12]
 8004076:	f003 0306 	and.w	r3, r3, #6
 800407a:	2b04      	cmp	r3, #4
 800407c:	bf18      	it	ne
 800407e:	2500      	movne	r5, #0
 8004080:	6832      	ldr	r2, [r6, #0]
 8004082:	f04f 0600 	mov.w	r6, #0
 8004086:	68a3      	ldr	r3, [r4, #8]
 8004088:	bf08      	it	eq
 800408a:	1aad      	subeq	r5, r5, r2
 800408c:	6922      	ldr	r2, [r4, #16]
 800408e:	bf08      	it	eq
 8004090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004094:	4293      	cmp	r3, r2
 8004096:	bfc4      	itt	gt
 8004098:	1a9b      	subgt	r3, r3, r2
 800409a:	18ed      	addgt	r5, r5, r3
 800409c:	341a      	adds	r4, #26
 800409e:	42b5      	cmp	r5, r6
 80040a0:	d11a      	bne.n	80040d8 <_printf_common+0xcc>
 80040a2:	2000      	movs	r0, #0
 80040a4:	e008      	b.n	80040b8 <_printf_common+0xac>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4652      	mov	r2, sl
 80040aa:	4649      	mov	r1, r9
 80040ac:	4638      	mov	r0, r7
 80040ae:	47c0      	blx	r8
 80040b0:	3001      	adds	r0, #1
 80040b2:	d103      	bne.n	80040bc <_printf_common+0xb0>
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040bc:	3501      	adds	r5, #1
 80040be:	e7c4      	b.n	800404a <_printf_common+0x3e>
 80040c0:	2030      	movs	r0, #48	; 0x30
 80040c2:	18e1      	adds	r1, r4, r3
 80040c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ce:	4422      	add	r2, r4
 80040d0:	3302      	adds	r3, #2
 80040d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040d6:	e7c5      	b.n	8004064 <_printf_common+0x58>
 80040d8:	2301      	movs	r3, #1
 80040da:	4622      	mov	r2, r4
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	47c0      	blx	r8
 80040e2:	3001      	adds	r0, #1
 80040e4:	d0e6      	beq.n	80040b4 <_printf_common+0xa8>
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7d9      	b.n	800409e <_printf_common+0x92>
	...

080040ec <_printf_i>:
 80040ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	7e0f      	ldrb	r7, [r1, #24]
 80040f2:	4691      	mov	r9, r2
 80040f4:	2f78      	cmp	r7, #120	; 0x78
 80040f6:	4680      	mov	r8, r0
 80040f8:	460c      	mov	r4, r1
 80040fa:	469a      	mov	sl, r3
 80040fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004102:	d807      	bhi.n	8004114 <_printf_i+0x28>
 8004104:	2f62      	cmp	r7, #98	; 0x62
 8004106:	d80a      	bhi.n	800411e <_printf_i+0x32>
 8004108:	2f00      	cmp	r7, #0
 800410a:	f000 80d9 	beq.w	80042c0 <_printf_i+0x1d4>
 800410e:	2f58      	cmp	r7, #88	; 0x58
 8004110:	f000 80a4 	beq.w	800425c <_printf_i+0x170>
 8004114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800411c:	e03a      	b.n	8004194 <_printf_i+0xa8>
 800411e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004122:	2b15      	cmp	r3, #21
 8004124:	d8f6      	bhi.n	8004114 <_printf_i+0x28>
 8004126:	a101      	add	r1, pc, #4	; (adr r1, 800412c <_printf_i+0x40>)
 8004128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800412c:	08004185 	.word	0x08004185
 8004130:	08004199 	.word	0x08004199
 8004134:	08004115 	.word	0x08004115
 8004138:	08004115 	.word	0x08004115
 800413c:	08004115 	.word	0x08004115
 8004140:	08004115 	.word	0x08004115
 8004144:	08004199 	.word	0x08004199
 8004148:	08004115 	.word	0x08004115
 800414c:	08004115 	.word	0x08004115
 8004150:	08004115 	.word	0x08004115
 8004154:	08004115 	.word	0x08004115
 8004158:	080042a7 	.word	0x080042a7
 800415c:	080041c9 	.word	0x080041c9
 8004160:	08004289 	.word	0x08004289
 8004164:	08004115 	.word	0x08004115
 8004168:	08004115 	.word	0x08004115
 800416c:	080042c9 	.word	0x080042c9
 8004170:	08004115 	.word	0x08004115
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004115 	.word	0x08004115
 800417c:	08004115 	.word	0x08004115
 8004180:	08004291 	.word	0x08004291
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	602a      	str	r2, [r5, #0]
 800418c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004194:	2301      	movs	r3, #1
 8004196:	e0a4      	b.n	80042e2 <_printf_i+0x1f6>
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	6829      	ldr	r1, [r5, #0]
 800419c:	0606      	lsls	r6, r0, #24
 800419e:	f101 0304 	add.w	r3, r1, #4
 80041a2:	d50a      	bpl.n	80041ba <_printf_i+0xce>
 80041a4:	680e      	ldr	r6, [r1, #0]
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	2e00      	cmp	r6, #0
 80041aa:	da03      	bge.n	80041b4 <_printf_i+0xc8>
 80041ac:	232d      	movs	r3, #45	; 0x2d
 80041ae:	4276      	negs	r6, r6
 80041b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041b4:	230a      	movs	r3, #10
 80041b6:	485e      	ldr	r0, [pc, #376]	; (8004330 <_printf_i+0x244>)
 80041b8:	e019      	b.n	80041ee <_printf_i+0x102>
 80041ba:	680e      	ldr	r6, [r1, #0]
 80041bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041c0:	602b      	str	r3, [r5, #0]
 80041c2:	bf18      	it	ne
 80041c4:	b236      	sxthne	r6, r6
 80041c6:	e7ef      	b.n	80041a8 <_printf_i+0xbc>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	6820      	ldr	r0, [r4, #0]
 80041cc:	1d19      	adds	r1, r3, #4
 80041ce:	6029      	str	r1, [r5, #0]
 80041d0:	0601      	lsls	r1, r0, #24
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0xec>
 80041d4:	681e      	ldr	r6, [r3, #0]
 80041d6:	e002      	b.n	80041de <_printf_i+0xf2>
 80041d8:	0646      	lsls	r6, r0, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0xe8>
 80041dc:	881e      	ldrh	r6, [r3, #0]
 80041de:	2f6f      	cmp	r7, #111	; 0x6f
 80041e0:	bf0c      	ite	eq
 80041e2:	2308      	moveq	r3, #8
 80041e4:	230a      	movne	r3, #10
 80041e6:	4852      	ldr	r0, [pc, #328]	; (8004330 <_printf_i+0x244>)
 80041e8:	2100      	movs	r1, #0
 80041ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ee:	6865      	ldr	r5, [r4, #4]
 80041f0:	2d00      	cmp	r5, #0
 80041f2:	bfa8      	it	ge
 80041f4:	6821      	ldrge	r1, [r4, #0]
 80041f6:	60a5      	str	r5, [r4, #8]
 80041f8:	bfa4      	itt	ge
 80041fa:	f021 0104 	bicge.w	r1, r1, #4
 80041fe:	6021      	strge	r1, [r4, #0]
 8004200:	b90e      	cbnz	r6, 8004206 <_printf_i+0x11a>
 8004202:	2d00      	cmp	r5, #0
 8004204:	d04d      	beq.n	80042a2 <_printf_i+0x1b6>
 8004206:	4615      	mov	r5, r2
 8004208:	fbb6 f1f3 	udiv	r1, r6, r3
 800420c:	fb03 6711 	mls	r7, r3, r1, r6
 8004210:	5dc7      	ldrb	r7, [r0, r7]
 8004212:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004216:	4637      	mov	r7, r6
 8004218:	42bb      	cmp	r3, r7
 800421a:	460e      	mov	r6, r1
 800421c:	d9f4      	bls.n	8004208 <_printf_i+0x11c>
 800421e:	2b08      	cmp	r3, #8
 8004220:	d10b      	bne.n	800423a <_printf_i+0x14e>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	07de      	lsls	r6, r3, #31
 8004226:	d508      	bpl.n	800423a <_printf_i+0x14e>
 8004228:	6923      	ldr	r3, [r4, #16]
 800422a:	6861      	ldr	r1, [r4, #4]
 800422c:	4299      	cmp	r1, r3
 800422e:	bfde      	ittt	le
 8004230:	2330      	movle	r3, #48	; 0x30
 8004232:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004236:	f105 35ff 	addle.w	r5, r5, #4294967295
 800423a:	1b52      	subs	r2, r2, r5
 800423c:	6122      	str	r2, [r4, #16]
 800423e:	464b      	mov	r3, r9
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f8cd a000 	str.w	sl, [sp]
 8004248:	aa03      	add	r2, sp, #12
 800424a:	f7ff fedf 	bl	800400c <_printf_common>
 800424e:	3001      	adds	r0, #1
 8004250:	d14c      	bne.n	80042ec <_printf_i+0x200>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	b004      	add	sp, #16
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	4834      	ldr	r0, [pc, #208]	; (8004330 <_printf_i+0x244>)
 800425e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004262:	6829      	ldr	r1, [r5, #0]
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f851 6b04 	ldr.w	r6, [r1], #4
 800426a:	6029      	str	r1, [r5, #0]
 800426c:	061d      	lsls	r5, r3, #24
 800426e:	d514      	bpl.n	800429a <_printf_i+0x1ae>
 8004270:	07df      	lsls	r7, r3, #31
 8004272:	bf44      	itt	mi
 8004274:	f043 0320 	orrmi.w	r3, r3, #32
 8004278:	6023      	strmi	r3, [r4, #0]
 800427a:	b91e      	cbnz	r6, 8004284 <_printf_i+0x198>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f023 0320 	bic.w	r3, r3, #32
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	2310      	movs	r3, #16
 8004286:	e7af      	b.n	80041e8 <_printf_i+0xfc>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	f043 0320 	orr.w	r3, r3, #32
 800428e:	6023      	str	r3, [r4, #0]
 8004290:	2378      	movs	r3, #120	; 0x78
 8004292:	4828      	ldr	r0, [pc, #160]	; (8004334 <_printf_i+0x248>)
 8004294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004298:	e7e3      	b.n	8004262 <_printf_i+0x176>
 800429a:	0659      	lsls	r1, r3, #25
 800429c:	bf48      	it	mi
 800429e:	b2b6      	uxthmi	r6, r6
 80042a0:	e7e6      	b.n	8004270 <_printf_i+0x184>
 80042a2:	4615      	mov	r5, r2
 80042a4:	e7bb      	b.n	800421e <_printf_i+0x132>
 80042a6:	682b      	ldr	r3, [r5, #0]
 80042a8:	6826      	ldr	r6, [r4, #0]
 80042aa:	1d18      	adds	r0, r3, #4
 80042ac:	6961      	ldr	r1, [r4, #20]
 80042ae:	6028      	str	r0, [r5, #0]
 80042b0:	0635      	lsls	r5, r6, #24
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	d501      	bpl.n	80042ba <_printf_i+0x1ce>
 80042b6:	6019      	str	r1, [r3, #0]
 80042b8:	e002      	b.n	80042c0 <_printf_i+0x1d4>
 80042ba:	0670      	lsls	r0, r6, #25
 80042bc:	d5fb      	bpl.n	80042b6 <_printf_i+0x1ca>
 80042be:	8019      	strh	r1, [r3, #0]
 80042c0:	2300      	movs	r3, #0
 80042c2:	4615      	mov	r5, r2
 80042c4:	6123      	str	r3, [r4, #16]
 80042c6:	e7ba      	b.n	800423e <_printf_i+0x152>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	2100      	movs	r1, #0
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	602a      	str	r2, [r5, #0]
 80042d0:	681d      	ldr	r5, [r3, #0]
 80042d2:	6862      	ldr	r2, [r4, #4]
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 f82f 	bl	8004338 <memchr>
 80042da:	b108      	cbz	r0, 80042e0 <_printf_i+0x1f4>
 80042dc:	1b40      	subs	r0, r0, r5
 80042de:	6060      	str	r0, [r4, #4]
 80042e0:	6863      	ldr	r3, [r4, #4]
 80042e2:	6123      	str	r3, [r4, #16]
 80042e4:	2300      	movs	r3, #0
 80042e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ea:	e7a8      	b.n	800423e <_printf_i+0x152>
 80042ec:	462a      	mov	r2, r5
 80042ee:	4649      	mov	r1, r9
 80042f0:	4640      	mov	r0, r8
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	47d0      	blx	sl
 80042f6:	3001      	adds	r0, #1
 80042f8:	d0ab      	beq.n	8004252 <_printf_i+0x166>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	079b      	lsls	r3, r3, #30
 80042fe:	d413      	bmi.n	8004328 <_printf_i+0x23c>
 8004300:	68e0      	ldr	r0, [r4, #12]
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	4298      	cmp	r0, r3
 8004306:	bfb8      	it	lt
 8004308:	4618      	movlt	r0, r3
 800430a:	e7a4      	b.n	8004256 <_printf_i+0x16a>
 800430c:	2301      	movs	r3, #1
 800430e:	4632      	mov	r2, r6
 8004310:	4649      	mov	r1, r9
 8004312:	4640      	mov	r0, r8
 8004314:	47d0      	blx	sl
 8004316:	3001      	adds	r0, #1
 8004318:	d09b      	beq.n	8004252 <_printf_i+0x166>
 800431a:	3501      	adds	r5, #1
 800431c:	68e3      	ldr	r3, [r4, #12]
 800431e:	9903      	ldr	r1, [sp, #12]
 8004320:	1a5b      	subs	r3, r3, r1
 8004322:	42ab      	cmp	r3, r5
 8004324:	dcf2      	bgt.n	800430c <_printf_i+0x220>
 8004326:	e7eb      	b.n	8004300 <_printf_i+0x214>
 8004328:	2500      	movs	r5, #0
 800432a:	f104 0619 	add.w	r6, r4, #25
 800432e:	e7f5      	b.n	800431c <_printf_i+0x230>
 8004330:	080047c5 	.word	0x080047c5
 8004334:	080047d6 	.word	0x080047d6

08004338 <memchr>:
 8004338:	4603      	mov	r3, r0
 800433a:	b510      	push	{r4, lr}
 800433c:	b2c9      	uxtb	r1, r1
 800433e:	4402      	add	r2, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	4618      	mov	r0, r3
 8004344:	d101      	bne.n	800434a <memchr+0x12>
 8004346:	2000      	movs	r0, #0
 8004348:	e003      	b.n	8004352 <memchr+0x1a>
 800434a:	7804      	ldrb	r4, [r0, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	428c      	cmp	r4, r1
 8004350:	d1f6      	bne.n	8004340 <memchr+0x8>
 8004352:	bd10      	pop	{r4, pc}

08004354 <memcpy>:
 8004354:	440a      	add	r2, r1
 8004356:	4291      	cmp	r1, r2
 8004358:	f100 33ff 	add.w	r3, r0, #4294967295
 800435c:	d100      	bne.n	8004360 <memcpy+0xc>
 800435e:	4770      	bx	lr
 8004360:	b510      	push	{r4, lr}
 8004362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004366:	4291      	cmp	r1, r2
 8004368:	f803 4f01 	strb.w	r4, [r3, #1]!
 800436c:	d1f9      	bne.n	8004362 <memcpy+0xe>
 800436e:	bd10      	pop	{r4, pc}

08004370 <memmove>:
 8004370:	4288      	cmp	r0, r1
 8004372:	b510      	push	{r4, lr}
 8004374:	eb01 0402 	add.w	r4, r1, r2
 8004378:	d902      	bls.n	8004380 <memmove+0x10>
 800437a:	4284      	cmp	r4, r0
 800437c:	4623      	mov	r3, r4
 800437e:	d807      	bhi.n	8004390 <memmove+0x20>
 8004380:	1e43      	subs	r3, r0, #1
 8004382:	42a1      	cmp	r1, r4
 8004384:	d008      	beq.n	8004398 <memmove+0x28>
 8004386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800438a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800438e:	e7f8      	b.n	8004382 <memmove+0x12>
 8004390:	4601      	mov	r1, r0
 8004392:	4402      	add	r2, r0
 8004394:	428a      	cmp	r2, r1
 8004396:	d100      	bne.n	800439a <memmove+0x2a>
 8004398:	bd10      	pop	{r4, pc}
 800439a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800439e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043a2:	e7f7      	b.n	8004394 <memmove+0x24>

080043a4 <_free_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d040      	beq.n	800442e <_free_r+0x8a>
 80043ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b0:	1f0c      	subs	r4, r1, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfb8      	it	lt
 80043b6:	18e4      	addlt	r4, r4, r3
 80043b8:	f000 f910 	bl	80045dc <__malloc_lock>
 80043bc:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <_free_r+0x8c>)
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	b933      	cbnz	r3, 80043d0 <_free_r+0x2c>
 80043c2:	6063      	str	r3, [r4, #4]
 80043c4:	6014      	str	r4, [r2, #0]
 80043c6:	4628      	mov	r0, r5
 80043c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043cc:	f000 b90c 	b.w	80045e8 <__malloc_unlock>
 80043d0:	42a3      	cmp	r3, r4
 80043d2:	d908      	bls.n	80043e6 <_free_r+0x42>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	1821      	adds	r1, r4, r0
 80043d8:	428b      	cmp	r3, r1
 80043da:	bf01      	itttt	eq
 80043dc:	6819      	ldreq	r1, [r3, #0]
 80043de:	685b      	ldreq	r3, [r3, #4]
 80043e0:	1809      	addeq	r1, r1, r0
 80043e2:	6021      	streq	r1, [r4, #0]
 80043e4:	e7ed      	b.n	80043c2 <_free_r+0x1e>
 80043e6:	461a      	mov	r2, r3
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b10b      	cbz	r3, 80043f0 <_free_r+0x4c>
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d9fa      	bls.n	80043e6 <_free_r+0x42>
 80043f0:	6811      	ldr	r1, [r2, #0]
 80043f2:	1850      	adds	r0, r2, r1
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d10b      	bne.n	8004410 <_free_r+0x6c>
 80043f8:	6820      	ldr	r0, [r4, #0]
 80043fa:	4401      	add	r1, r0
 80043fc:	1850      	adds	r0, r2, r1
 80043fe:	4283      	cmp	r3, r0
 8004400:	6011      	str	r1, [r2, #0]
 8004402:	d1e0      	bne.n	80043c6 <_free_r+0x22>
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4401      	add	r1, r0
 800440a:	6011      	str	r1, [r2, #0]
 800440c:	6053      	str	r3, [r2, #4]
 800440e:	e7da      	b.n	80043c6 <_free_r+0x22>
 8004410:	d902      	bls.n	8004418 <_free_r+0x74>
 8004412:	230c      	movs	r3, #12
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	e7d6      	b.n	80043c6 <_free_r+0x22>
 8004418:	6820      	ldr	r0, [r4, #0]
 800441a:	1821      	adds	r1, r4, r0
 800441c:	428b      	cmp	r3, r1
 800441e:	bf01      	itttt	eq
 8004420:	6819      	ldreq	r1, [r3, #0]
 8004422:	685b      	ldreq	r3, [r3, #4]
 8004424:	1809      	addeq	r1, r1, r0
 8004426:	6021      	streq	r1, [r4, #0]
 8004428:	6063      	str	r3, [r4, #4]
 800442a:	6054      	str	r4, [r2, #4]
 800442c:	e7cb      	b.n	80043c6 <_free_r+0x22>
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	20000188 	.word	0x20000188

08004434 <sbrk_aligned>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4e0e      	ldr	r6, [pc, #56]	; (8004470 <sbrk_aligned+0x3c>)
 8004438:	460c      	mov	r4, r1
 800443a:	6831      	ldr	r1, [r6, #0]
 800443c:	4605      	mov	r5, r0
 800443e:	b911      	cbnz	r1, 8004446 <sbrk_aligned+0x12>
 8004440:	f000 f8bc 	bl	80045bc <_sbrk_r>
 8004444:	6030      	str	r0, [r6, #0]
 8004446:	4621      	mov	r1, r4
 8004448:	4628      	mov	r0, r5
 800444a:	f000 f8b7 	bl	80045bc <_sbrk_r>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	d00a      	beq.n	8004468 <sbrk_aligned+0x34>
 8004452:	1cc4      	adds	r4, r0, #3
 8004454:	f024 0403 	bic.w	r4, r4, #3
 8004458:	42a0      	cmp	r0, r4
 800445a:	d007      	beq.n	800446c <sbrk_aligned+0x38>
 800445c:	1a21      	subs	r1, r4, r0
 800445e:	4628      	mov	r0, r5
 8004460:	f000 f8ac 	bl	80045bc <_sbrk_r>
 8004464:	3001      	adds	r0, #1
 8004466:	d101      	bne.n	800446c <sbrk_aligned+0x38>
 8004468:	f04f 34ff 	mov.w	r4, #4294967295
 800446c:	4620      	mov	r0, r4
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	2000018c 	.word	0x2000018c

08004474 <_malloc_r>:
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004478:	1ccd      	adds	r5, r1, #3
 800447a:	f025 0503 	bic.w	r5, r5, #3
 800447e:	3508      	adds	r5, #8
 8004480:	2d0c      	cmp	r5, #12
 8004482:	bf38      	it	cc
 8004484:	250c      	movcc	r5, #12
 8004486:	2d00      	cmp	r5, #0
 8004488:	4607      	mov	r7, r0
 800448a:	db01      	blt.n	8004490 <_malloc_r+0x1c>
 800448c:	42a9      	cmp	r1, r5
 800448e:	d905      	bls.n	800449c <_malloc_r+0x28>
 8004490:	230c      	movs	r3, #12
 8004492:	2600      	movs	r6, #0
 8004494:	603b      	str	r3, [r7, #0]
 8004496:	4630      	mov	r0, r6
 8004498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800449c:	4e2e      	ldr	r6, [pc, #184]	; (8004558 <_malloc_r+0xe4>)
 800449e:	f000 f89d 	bl	80045dc <__malloc_lock>
 80044a2:	6833      	ldr	r3, [r6, #0]
 80044a4:	461c      	mov	r4, r3
 80044a6:	bb34      	cbnz	r4, 80044f6 <_malloc_r+0x82>
 80044a8:	4629      	mov	r1, r5
 80044aa:	4638      	mov	r0, r7
 80044ac:	f7ff ffc2 	bl	8004434 <sbrk_aligned>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	4604      	mov	r4, r0
 80044b4:	d14d      	bne.n	8004552 <_malloc_r+0xde>
 80044b6:	6834      	ldr	r4, [r6, #0]
 80044b8:	4626      	mov	r6, r4
 80044ba:	2e00      	cmp	r6, #0
 80044bc:	d140      	bne.n	8004540 <_malloc_r+0xcc>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	4631      	mov	r1, r6
 80044c2:	4638      	mov	r0, r7
 80044c4:	eb04 0803 	add.w	r8, r4, r3
 80044c8:	f000 f878 	bl	80045bc <_sbrk_r>
 80044cc:	4580      	cmp	r8, r0
 80044ce:	d13a      	bne.n	8004546 <_malloc_r+0xd2>
 80044d0:	6821      	ldr	r1, [r4, #0]
 80044d2:	3503      	adds	r5, #3
 80044d4:	1a6d      	subs	r5, r5, r1
 80044d6:	f025 0503 	bic.w	r5, r5, #3
 80044da:	3508      	adds	r5, #8
 80044dc:	2d0c      	cmp	r5, #12
 80044de:	bf38      	it	cc
 80044e0:	250c      	movcc	r5, #12
 80044e2:	4638      	mov	r0, r7
 80044e4:	4629      	mov	r1, r5
 80044e6:	f7ff ffa5 	bl	8004434 <sbrk_aligned>
 80044ea:	3001      	adds	r0, #1
 80044ec:	d02b      	beq.n	8004546 <_malloc_r+0xd2>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	442b      	add	r3, r5
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	e00e      	b.n	8004514 <_malloc_r+0xa0>
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	1b52      	subs	r2, r2, r5
 80044fa:	d41e      	bmi.n	800453a <_malloc_r+0xc6>
 80044fc:	2a0b      	cmp	r2, #11
 80044fe:	d916      	bls.n	800452e <_malloc_r+0xba>
 8004500:	1961      	adds	r1, r4, r5
 8004502:	42a3      	cmp	r3, r4
 8004504:	6025      	str	r5, [r4, #0]
 8004506:	bf18      	it	ne
 8004508:	6059      	strne	r1, [r3, #4]
 800450a:	6863      	ldr	r3, [r4, #4]
 800450c:	bf08      	it	eq
 800450e:	6031      	streq	r1, [r6, #0]
 8004510:	5162      	str	r2, [r4, r5]
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	4638      	mov	r0, r7
 8004516:	f104 060b 	add.w	r6, r4, #11
 800451a:	f000 f865 	bl	80045e8 <__malloc_unlock>
 800451e:	f026 0607 	bic.w	r6, r6, #7
 8004522:	1d23      	adds	r3, r4, #4
 8004524:	1af2      	subs	r2, r6, r3
 8004526:	d0b6      	beq.n	8004496 <_malloc_r+0x22>
 8004528:	1b9b      	subs	r3, r3, r6
 800452a:	50a3      	str	r3, [r4, r2]
 800452c:	e7b3      	b.n	8004496 <_malloc_r+0x22>
 800452e:	6862      	ldr	r2, [r4, #4]
 8004530:	42a3      	cmp	r3, r4
 8004532:	bf0c      	ite	eq
 8004534:	6032      	streq	r2, [r6, #0]
 8004536:	605a      	strne	r2, [r3, #4]
 8004538:	e7ec      	b.n	8004514 <_malloc_r+0xa0>
 800453a:	4623      	mov	r3, r4
 800453c:	6864      	ldr	r4, [r4, #4]
 800453e:	e7b2      	b.n	80044a6 <_malloc_r+0x32>
 8004540:	4634      	mov	r4, r6
 8004542:	6876      	ldr	r6, [r6, #4]
 8004544:	e7b9      	b.n	80044ba <_malloc_r+0x46>
 8004546:	230c      	movs	r3, #12
 8004548:	4638      	mov	r0, r7
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	f000 f84c 	bl	80045e8 <__malloc_unlock>
 8004550:	e7a1      	b.n	8004496 <_malloc_r+0x22>
 8004552:	6025      	str	r5, [r4, #0]
 8004554:	e7de      	b.n	8004514 <_malloc_r+0xa0>
 8004556:	bf00      	nop
 8004558:	20000188 	.word	0x20000188

0800455c <_realloc_r>:
 800455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004560:	4680      	mov	r8, r0
 8004562:	4614      	mov	r4, r2
 8004564:	460e      	mov	r6, r1
 8004566:	b921      	cbnz	r1, 8004572 <_realloc_r+0x16>
 8004568:	4611      	mov	r1, r2
 800456a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800456e:	f7ff bf81 	b.w	8004474 <_malloc_r>
 8004572:	b92a      	cbnz	r2, 8004580 <_realloc_r+0x24>
 8004574:	f7ff ff16 	bl	80043a4 <_free_r>
 8004578:	4625      	mov	r5, r4
 800457a:	4628      	mov	r0, r5
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	f000 f838 	bl	80045f4 <_malloc_usable_size_r>
 8004584:	4284      	cmp	r4, r0
 8004586:	4607      	mov	r7, r0
 8004588:	d802      	bhi.n	8004590 <_realloc_r+0x34>
 800458a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800458e:	d812      	bhi.n	80045b6 <_realloc_r+0x5a>
 8004590:	4621      	mov	r1, r4
 8004592:	4640      	mov	r0, r8
 8004594:	f7ff ff6e 	bl	8004474 <_malloc_r>
 8004598:	4605      	mov	r5, r0
 800459a:	2800      	cmp	r0, #0
 800459c:	d0ed      	beq.n	800457a <_realloc_r+0x1e>
 800459e:	42bc      	cmp	r4, r7
 80045a0:	4622      	mov	r2, r4
 80045a2:	4631      	mov	r1, r6
 80045a4:	bf28      	it	cs
 80045a6:	463a      	movcs	r2, r7
 80045a8:	f7ff fed4 	bl	8004354 <memcpy>
 80045ac:	4631      	mov	r1, r6
 80045ae:	4640      	mov	r0, r8
 80045b0:	f7ff fef8 	bl	80043a4 <_free_r>
 80045b4:	e7e1      	b.n	800457a <_realloc_r+0x1e>
 80045b6:	4635      	mov	r5, r6
 80045b8:	e7df      	b.n	800457a <_realloc_r+0x1e>
	...

080045bc <_sbrk_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	2300      	movs	r3, #0
 80045c0:	4d05      	ldr	r5, [pc, #20]	; (80045d8 <_sbrk_r+0x1c>)
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	f7fd f944 	bl	8001854 <_sbrk>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d102      	bne.n	80045d6 <_sbrk_r+0x1a>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	b103      	cbz	r3, 80045d6 <_sbrk_r+0x1a>
 80045d4:	6023      	str	r3, [r4, #0]
 80045d6:	bd38      	pop	{r3, r4, r5, pc}
 80045d8:	20000190 	.word	0x20000190

080045dc <__malloc_lock>:
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <__malloc_lock+0x8>)
 80045de:	f000 b811 	b.w	8004604 <__retarget_lock_acquire_recursive>
 80045e2:	bf00      	nop
 80045e4:	20000194 	.word	0x20000194

080045e8 <__malloc_unlock>:
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <__malloc_unlock+0x8>)
 80045ea:	f000 b80c 	b.w	8004606 <__retarget_lock_release_recursive>
 80045ee:	bf00      	nop
 80045f0:	20000194 	.word	0x20000194

080045f4 <_malloc_usable_size_r>:
 80045f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f8:	1f18      	subs	r0, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bfbc      	itt	lt
 80045fe:	580b      	ldrlt	r3, [r1, r0]
 8004600:	18c0      	addlt	r0, r0, r3
 8004602:	4770      	bx	lr

08004604 <__retarget_lock_acquire_recursive>:
 8004604:	4770      	bx	lr

08004606 <__retarget_lock_release_recursive>:
 8004606:	4770      	bx	lr

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
